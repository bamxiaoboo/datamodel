Runtime_MGT/inout_interface_mgt.cxx:99:Connection_coupling_procedure::Connection_coupling_procedure(Inout_interface *inout_interface, Coupling_connection *coupling_connection)
Runtime_MGT/inout_interface_mgt.cxx:105:	this->coupling_connection = coupling_connection; 
Runtime_MGT/inout_interface_mgt.cxx:106:	coupling_connections_dumped = false;
Runtime_MGT/inout_interface_mgt.cxx:111:	for (int i = 0; i < coupling_connection->fields_name.size(); i ++)
Runtime_MGT/inout_interface_mgt.cxx:112:		for (int j=i+1; j < coupling_connection->fields_name.size(); j ++)
Runtime_MGT/inout_interface_mgt.cxx:113:			EXECUTION_REPORT(REPORT_ERROR, -1, !words_are_the_same(coupling_connection->fields_name[i], coupling_connection->fields_name[j]), 
Runtime_MGT/inout_interface_mgt.cxx:115:			                 coupling_connection->fields_name[i]);
Runtime_MGT/inout_interface_mgt.cxx:117:	fields_time_info_src = new Connection_field_time_info(inout_interface, coupling_connection->src_timer, coupling_connection->src_time_step_in_second, coupling_connection->src_current_year, coupling_connection->src_current_month, coupling_connection->src_current_day, coupling_connection->src_current_second, -1);
Runtime_MGT/inout_interface_mgt.cxx:118:	fields_time_info_dst = new Connection_field_time_info(inout_interface, coupling_connection->dst_timer, coupling_connection->dst_time_step_in_second, coupling_connection->dst_current_year, coupling_connection->dst_current_month, coupling_connection->dst_current_day, coupling_connection->dst_current_second, coupling_connection->dst_inst_or_aver);
Runtime_MGT/inout_interface_mgt.cxx:123:	for (int i = 0; i < coupling_connection->src_fields_info.size(); i ++) {
Runtime_MGT/inout_interface_mgt.cxx:129:		if (i < coupling_connection->fields_name.size()) {
Runtime_MGT/inout_interface_mgt.cxx:130:			fields_mem_registered.push_back(inout_interface->search_registered_field_instance(coupling_connection->fields_name[i], field_local_index));
Runtime_MGT/inout_interface_mgt.cxx:134:			fields_mem_registered.push_back(coupling_connection->get_bottom_field(inout_interface->get_interface_type() == COUPLING_INTERFACE_MARK_EXPORT, i-coupling_connection->fields_name.size()));
Runtime_MGT/inout_interface_mgt.cxx:143:				fields_mem_inner_step_averaged[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_AVERAGED_INNER, coupling_connection->connection_id, NULL, 
Runtime_MGT/inout_interface_mgt.cxx:144:		                                                                      inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:147:				fields_mem_inter_step_averaged[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_AVERAGED_INTER, coupling_connection->connection_id, NULL, 
Runtime_MGT/inout_interface_mgt.cxx:148:				                                                              inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:162:		const char *transfer_data_type = get_data_type_size(coupling_connection->src_fields_info[i]->data_type) <= get_data_type_size(coupling_connection->dst_fields_info[i]->data_type)? 
Runtime_MGT/inout_interface_mgt.cxx:163:			                             coupling_connection->src_fields_info[i]->data_type : coupling_connection->dst_fields_info[i]->data_type;
Runtime_MGT/inout_interface_mgt.cxx:165:			if (!words_are_the_same(transfer_data_type, coupling_connection->src_fields_info[i]->data_type)) {
Runtime_MGT/inout_interface_mgt.cxx:168:					             fields_mem_registered[i]->get_field_name(), coupling_connection->src_fields_info[i]->data_type, transfer_data_type);
Runtime_MGT/inout_interface_mgt.cxx:169:				fields_mem_datatype_transformed[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_DATATYPE_TRANS, coupling_connection->connection_id, transfer_data_type, 
Runtime_MGT/inout_interface_mgt.cxx:170:					                                                           inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:175:			if (coupling_connection->dst_fields_info[i]->runtime_remapping_weights == NULL || coupling_connection->dst_fields_info[i]->runtime_remapping_weights->get_parallel_remapping_weights() == NULL)
Runtime_MGT/inout_interface_mgt.cxx:176:				fields_mem_transfer[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_DATA_TRANSFER, coupling_connection->connection_id, transfer_data_type, 
Runtime_MGT/inout_interface_mgt.cxx:177:				                                                   inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:179:				fields_mem_transfer[i] = memory_manager->alloc_mem(fields_mem_registered[i]->get_field_name(), coupling_connection->dst_fields_info[i]->runtime_remapping_weights->get_src_decomp_info()->get_decomp_id(), 
Runtime_MGT/inout_interface_mgt.cxx:180:					                                               coupling_connection->dst_fields_info[i]->runtime_remapping_weights->get_src_original_grid()->get_grid_id(), BUF_MARK_DATA_TRANSFER^coupling_connection->connection_id, 
Runtime_MGT/inout_interface_mgt.cxx:181:					                                               transfer_data_type, fields_mem_registered[i]->get_unit(), "internal", inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:183:					                                               BUF_MARK_REMAP_NORMAL^coupling_connection->connection_id, transfer_data_type, fields_mem_registered[i]->get_unit(), "internal", 
Runtime_MGT/inout_interface_mgt.cxx:184:					                                               inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:185:				runtime_remap_algorithms[i] = new Runtime_remap_algorithm(coupling_connection->dst_fields_info[i]->runtime_remapping_weights, fields_mem_transfer[i], fields_mem_remapped[i], coupling_connection->connection_id);
Runtime_MGT/inout_interface_mgt.cxx:187:			if (!words_are_the_same(transfer_data_type, coupling_connection->dst_fields_info[i]->data_type)) {
Runtime_MGT/inout_interface_mgt.cxx:190:					             fields_mem_registered[i]->get_field_name(), transfer_data_type, coupling_connection->dst_fields_info[i]->data_type);
Runtime_MGT/inout_interface_mgt.cxx:191:				fields_mem_datatype_transformed[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_DATATYPE_TRANS, coupling_connection->connection_id, coupling_connection->dst_fields_info[i]->data_type, 
Runtime_MGT/inout_interface_mgt.cxx:192:					                                                           inout_interface->get_interface_source() == INTERFACE_SOURCE_REGISTER && i < coupling_connection->fields_name.size());
Runtime_MGT/inout_interface_mgt.cxx:325:				EXECUTION_REPORT_LOG(REPORT_LOG, inout_interface->get_comp_id(), true, "The import interface \"%s\" will not receive data from the component model \"%s\" that is at the time %ld (the restart time is %ld)", inout_interface->get_interface_name(), coupling_connection->get_src_comp_full_name(), current_remote_fields_time, time_mgr->get_restart_full_time());
Runtime_MGT/inout_interface_mgt.cxx:357:				EXECUTION_REPORT_ERROR_OPTIONALLY(REPORT_ERROR, inout_interface->get_comp_id(), remote_bypass_counter == inout_interface->get_bypass_counter(), "Error happens when bypassing the timer to call the import interface \"%s\": this interface call does not receive the data from the corresponding timer bypassed call of the export interface \"%s\" from the component model \"%s\". Please verify. %d %d", inout_interface->get_interface_name(), coupling_connection->src_comp_interfaces[0].second, coupling_connection->src_comp_interfaces[0].first, remote_bypass_counter, inout_interface->get_bypass_counter());
Runtime_MGT/inout_interface_mgt.cxx:360:				EXECUTION_REPORT_ERROR_OPTIONALLY(REPORT_ERROR, inout_interface->get_comp_id(), remote_bypass_counter == 0, "Error happens when using the timer to call the import interface \"%s\": this interface call does not receive the data from the corresponding timer non-bypassed call of the export interface \"%s\" from the component model \"%s\". Please verify. ", inout_interface->get_interface_name(), coupling_connection->src_comp_interfaces[0].second, coupling_connection->src_comp_interfaces[0].first);
Runtime_MGT/inout_interface_mgt.cxx:363:					             inout_interface->get_interface_name(), coupling_connection->src_comp_interfaces[0].second, coupling_connection->src_comp_interfaces[0].first, current_remote_fields_time, runtime_data_transfer_algorithm->get_history_receive_sender_time(i));
Runtime_MGT/inout_interface_mgt.cxx:423:			EXECUTION_REPORT_LOG(REPORT_LOG, inout_interface->get_comp_id(), true, "The export interface \"%s\" will not send data to the component model \"%s\" that is at the time %ld (the restart time is %ld)", inout_interface->get_interface_name(), coupling_connection->get_dst_comp_full_name(), current_remote_fields_time, time_mgr->get_restart_full_time());
Runtime_MGT/inout_interface_mgt.cxx:450:	return coupling_connection->dst_fields_info[i]->runtime_remapping_weights; 
Runtime_MGT/inout_interface_mgt.cxx:1093:	Field_mem_info *frac_field_src = memory_manager->alloc_mem("remap_frac", template_field_src->get_decomp_id(), template_field_src->get_comp_or_grid_id(), BUF_MARK_REMAP_FRAC ^ coupling_generator->get_latest_connection_id(), frac_data_type, "unitless", "source fraction for remapping", false);
Runtime_MGT/inout_interface_mgt.cxx:1095:	Field_mem_info *frac_field_dst = memory_manager->alloc_mem("remap_frac", template_field_dst->get_decomp_id(), template_field_dst->get_comp_or_grid_id(), BUF_MARK_REMAP_FRAC ^ coupling_generator->get_latest_connection_id(), frac_data_type, "unitless", "target fraction for remapping", false);
Runtime_MGT/inout_interface_mgt.cxx:1103:		children_interfaces[0]->fields_mem_registered[i] = memory_manager->alloc_mem(fields_mem_registered[i], BUF_MARK_REMAP_FRAC, coupling_generator->get_latest_connection_id(), fields_mem_registered[i]->get_data_type(), true);
Runtime_MGT/inout_interface_mgt.cxx:1123:	inout_interface_mgr->generate_remapping_interface_connection(this, num_fields, field_ids_src, true);
Runtime_MGT/inout_interface_mgt.cxx:1135:	bool field_has_connection = false;
Runtime_MGT/inout_interface_mgt.cxx:1146:		for (j = 0; j < coupling_procedures[i]->coupling_connection->fields_name.size(); j ++)
Runtime_MGT/inout_interface_mgt.cxx:1147:			if (words_are_the_same(fields_mem_registered[field_index]->get_field_name(),coupling_procedures[i]->coupling_connection->fields_name[j])) {
Runtime_MGT/inout_interface_mgt.cxx:1149:					if (coupling_procedures[i]->coupling_connection->dst_fields_info[j]->runtime_remapping_weights != NULL && coupling_procedures[i]->coupling_connection->dst_fields_info[j]->runtime_remapping_weights->get_src_H2D_grid_area() != NULL) {
Runtime_MGT/inout_interface_mgt.cxx:1150:						selected_area_array_in_wgts = coupling_procedures[i]->coupling_connection->dst_fields_info[j]->runtime_remapping_weights->get_dst_H2D_grid_area();
Runtime_MGT/inout_interface_mgt.cxx:1155:					if (coupling_procedures[i]->coupling_connection->src_fields_info[j]->runtime_remapping_weights != NULL && coupling_procedures[i]->coupling_connection->src_fields_info[j]->runtime_remapping_weights->get_src_H2D_grid_area() != NULL) {
Runtime_MGT/inout_interface_mgt.cxx:1156:						selected_area_array_in_wgts = coupling_procedures[i]->coupling_connection->src_fields_info[j]->runtime_remapping_weights->get_src_H2D_grid_area();
Runtime_MGT/inout_interface_mgt.cxx:1161:				field_has_connection = true;
Runtime_MGT/inout_interface_mgt.cxx:1167:	EXECUTION_REPORT(REPORT_WARNING, comp_id, field_has_connection, "WARNING happens when calling the API \"CCPL_get_H2D_grid_area_in_remapping_wgts\" based on the coupling interface \"%s\": the field \"%s\" corresponding to the field index (%d) has not been used in model coupling. Please verify the model code with the annotation \"%s\"", interface_name, fields_mem_registered[field_index]->get_field_name(), field_index+1, annotation);
Runtime_MGT/inout_interface_mgt.cxx:1229:void Inout_interface::dump_active_coupling_connections_into_XML(TiXmlElement *root_element)
Runtime_MGT/inout_interface_mgt.cxx:1239:	EXECUTION_REPORT(REPORT_ERROR, -1, parent_element != NULL, "Software error Inout_interface::dump_active_coupling_connections_into_XML");
Runtime_MGT/inout_interface_mgt.cxx:1255:    	if (coupling_procedures[i]->get_coupling_connections_dumped())
Runtime_MGT/inout_interface_mgt.cxx:1257:    	Coupling_connection *coupling_connection = coupling_procedures[i]->get_coupling_connection();
Runtime_MGT/inout_interface_mgt.cxx:1261:    		fields->SetAttribute("comp_full_name",coupling_connection->src_comp_interfaces[0].first);
Runtime_MGT/inout_interface_mgt.cxx:1262:    		fields->SetAttribute("interface_name",coupling_connection->src_comp_interfaces[0].second);
Runtime_MGT/inout_interface_mgt.cxx:1265:    		fields->SetAttribute("comp_full_name",coupling_connection->dst_comp_full_name);
Runtime_MGT/inout_interface_mgt.cxx:1266:    		fields->SetAttribute("interface_name",coupling_connection->dst_interface_name);
Runtime_MGT/inout_interface_mgt.cxx:1268:    	for (int j = 0; j < coupling_connection->fields_name.size(); j++) {
Runtime_MGT/inout_interface_mgt.cxx:1271:    		field->SetAttribute("name",coupling_connection->fields_name[j]);
Runtime_MGT/inout_interface_mgt.cxx:1273:    	coupling_procedures[i]->set_coupling_connections_dumped();
Runtime_MGT/inout_interface_mgt.cxx:1290:void Inout_interface::dump_active_coupling_connections()
Runtime_MGT/inout_interface_mgt.cxx:1302:		if(!coupling_procedures[i]->get_coupling_connections_dumped())
Runtime_MGT/inout_interface_mgt.cxx:1307:	sprintf(XML_file_name, "%s/%s.active_coupling_connections.xml", comp_comm_group_mgt_mgr->get_active_coupling_connections_dir(), comp_full_name);
Runtime_MGT/inout_interface_mgt.cxx:1322:	dump_active_coupling_connections_into_XML(root_element);
Runtime_MGT/inout_interface_mgt.cxx:1323:	EXECUTION_REPORT(REPORT_ERROR, -1, XML_file->SaveFile(XML_file_name), "software error in Inout_interface_mgt::dump_active_coupling_connections: fail to write the XML file %s", XML_file_name);
Runtime_MGT/inout_interface_mgt.cxx:1342:void Inout_interface_mgt::generate_remapping_interface_connection(Inout_interface *new_interface, int num_fields, int *field_ids_src, bool has_frac_remapping) 
Runtime_MGT/inout_interface_mgt.cxx:1344:	EXECUTION_REPORT_LOG(REPORT_LOG, new_interface->get_comp_id(), true, "start to generate the coupling connection of the remapping interface \"%s\"", new_interface->get_interface_name());
Runtime_MGT/inout_interface_mgt.cxx:1346:	coupling_generator->synchronize_latest_connection_id(comp_comm_group_mgt_mgr->get_comm_group_of_local_comp(new_interface->get_comp_id(), ""));
Runtime_MGT/inout_interface_mgt.cxx:1347:	Coupling_connection *coupling_connection = new Coupling_connection(coupling_generator->apply_connection_id());
Runtime_MGT/inout_interface_mgt.cxx:1354:	strcpy(coupling_connection->dst_comp_full_name, comp_comm_group_mgt_mgr->get_global_node_of_local_comp(new_interface->get_comp_id(), "in Inout_interface_mgt::register_normal_remap_interface")->get_full_name());
Runtime_MGT/inout_interface_mgt.cxx:1355:	strcpy(coupling_connection->dst_interface_name, child_interface_import->get_interface_name());
Runtime_MGT/inout_interface_mgt.cxx:1357:		coupling_connection->fields_name.push_back(strdup(memory_manager->get_field_instance(field_ids_src[i])->get_field_name()));
Runtime_MGT/inout_interface_mgt.cxx:1358:	src_comp_interface.first = strdup(coupling_connection->dst_comp_full_name);
Runtime_MGT/inout_interface_mgt.cxx:1360:	coupling_connection->src_comp_interfaces.push_back(src_comp_interface);
Runtime_MGT/inout_interface_mgt.cxx:1365:	coupling_connection->generate_a_coupling_procedure(has_frac_remapping);
Runtime_MGT/inout_interface_mgt.cxx:1366://	delete coupling_connection;
Runtime_MGT/inout_interface_mgt.cxx:1371:	EXECUTION_REPORT_LOG(REPORT_LOG, new_interface->get_comp_id(), true, "Finish generating the coupling connection of the remapping interface \"%s\"", new_interface->get_interface_name());
Runtime_MGT/inout_interface_mgt.cxx:1381:	generate_remapping_interface_connection(new_interface, num_fields, field_ids_src, false);
Runtime_MGT/inout_interface_mgt.cxx:1522:	inout_interface->dump_active_coupling_connections();
Runtime_MGT/inout_interface_mgt.cxx:1540:	inout_interface->dump_active_coupling_connections();
Runtime_MGT/inout_interface_mgt.h:45:class Coupling_connection;
Runtime_MGT/inout_interface_mgt.h:90:		Coupling_connection *coupling_connection;
Runtime_MGT/inout_interface_mgt.h:100:		bool coupling_connections_dumped;
Runtime_MGT/inout_interface_mgt.h:106:		Connection_coupling_procedure(Inout_interface*, Coupling_connection*);
Runtime_MGT/inout_interface_mgt.h:118:		Coupling_connection* get_coupling_connection(){return coupling_connection;}
Runtime_MGT/inout_interface_mgt.h:119:		bool get_coupling_connections_dumped(){return coupling_connections_dumped;}
Runtime_MGT/inout_interface_mgt.h:120:		void set_coupling_connections_dumped(){ coupling_connections_dumped = true;}
Runtime_MGT/inout_interface_mgt.h:188:		void dump_active_coupling_connections();
Runtime_MGT/inout_interface_mgt.h:189:		void dump_active_coupling_connections_into_XML(TiXmlElement *);
Runtime_MGT/inout_interface_mgt.h:210:		void generate_remapping_interface_connection(Inout_interface *, int, int *, bool);
Runtime_MGT/coupling_generator.cxx:27:MPI_Comm create_union_comm_common(MPI_Comm comp1, MPI_Comm comm2, int current_proc_id1, int current_proc_id2, std::vector<int> &procs_global_ids1, std::vector<int> &procs_global_ids2, int connection_id, int *proc_ranks_in_union_comm1, int *proc_ranks_in_union_comm2)
Runtime_MGT/coupling_generator.cxx:63:            MPI_Intercomm_create(comp1, 0, MPI_COMM_WORLD, procs_global_ids2[0], connection_id, &inter_comm);
Runtime_MGT/coupling_generator.cxx:67:            MPI_Intercomm_create(comm2, 0, MPI_COMM_WORLD, procs_global_ids1[0], connection_id, &inter_comm);
Runtime_MGT/coupling_generator.cxx:88:            MPI_Intercomm_create(comp1, 0, MPI_COMM_WORLD, procs_global_ids2[root_indx_in_exclusive_comm], connection_id, &inter_comm);
Runtime_MGT/coupling_generator.cxx:92:            MPI_Intercomm_create(exclusive_comm, 0, MPI_COMM_WORLD, procs_global_ids1[0], connection_id, &inter_comm);
Runtime_MGT/coupling_generator.cxx:116:Coupling_connection::Coupling_connection(int id)
Runtime_MGT/coupling_generator.cxx:122:	connection_id = id;
Runtime_MGT/coupling_generator.cxx:126:	if (connection_id > coupling_generator->get_latest_connection_id())
Runtime_MGT/coupling_generator.cxx:127:		coupling_generator->set_latest_connection_id(connection_id);
Runtime_MGT/coupling_generator.cxx:131:Coupling_connection::~Coupling_connection()
Runtime_MGT/coupling_generator.cxx:137:void Coupling_connection::generate_a_coupling_procedure(bool has_frac_remapping)
Runtime_MGT/coupling_generator.cxx:141:	EXECUTION_REPORT(REPORT_ERROR, -1, src_comp_node != NULL, "Software error in Coupling_connection::generate_a_coupling_procedure: Cannot find the src comp_node for \"%s\"", src_comp_interfaces[0].first);
Runtime_MGT/coupling_generator.cxx:142:	EXECUTION_REPORT(REPORT_ERROR, -1, dst_comp_node != NULL, "Software error in Coupling_connection::generate_a_coupling_procedure: Cannot find the dst comp_node for \"%s\"", dst_comp_full_name);
Runtime_MGT/coupling_generator.cxx:153:		EXECUTION_REPORT(REPORT_ERROR, -1, export_interface != NULL, "Software error in Coupling_connection::generate_a_coupling_procedure: NULL export interface");
Runtime_MGT/coupling_generator.cxx:154:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "start to generate a coupling connection from \"%s\" (current component) to \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:158:		EXECUTION_REPORT(REPORT_ERROR, -1, import_interface != NULL, "Software error in Coupling_connection::generate_a_coupling_procedure: NULL import interface");
Runtime_MGT/coupling_generator.cxx:159:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "start to generate a coupling connection from \"%s\" to \"%s\" (current component). The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:163:	exchange_connection_fields_info();
Runtime_MGT/coupling_generator.cxx:178:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "Finish generating a coupling connection from \"%s\" (current component) to \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:180:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "Finish generating a coupling connection from \"%s\" to \"%s\" (current component). The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:184:void Coupling_connection::create_union_comm()
Runtime_MGT/coupling_generator.cxx:192:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "start to create union comm between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:196:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "start to create union comm between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:209:	union_comm = create_union_comm_common(src_comp_node->get_comm_group(), dst_comp_node->get_comm_group(), current_proc_id_src_comp, current_proc_id_dst_comp, src_procs_global_ids, dst_procs_global_ids, connection_id, src_proc_ranks_in_union_comm, dst_proc_ranks_in_union_comm);
Runtime_MGT/coupling_generator.cxx:212:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "Finish creating union comm between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:214:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "Finish creating union comm between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:218:void Coupling_connection::generate_data_transfer()
Runtime_MGT/coupling_generator.cxx:232:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "Start to generate runtime data transfer algorithm from component \"%s\" (current component) to \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:234:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "Start to generate runtime data transfer algorithm from component \"%s\" to \"%s\" (current component). The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:254:        recv_algorithm_object = new Runtime_trans_algorithm(false, src_fields_info.size(), dst_fields_mem, fields_router, union_comm, src_proc_ranks_in_union_comm, connection_id);
Runtime_MGT/coupling_generator.cxx:259:        send_algorithm_object = new Runtime_trans_algorithm(true, src_fields_info.size(), src_fields_mem, fields_router, union_comm, dst_proc_ranks_in_union_comm, connection_id);
Runtime_MGT/coupling_generator.cxx:288:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "Finish generating runtime data transfer algorithm from component \"%s\" (current component) to \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:290:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "Finish generating runtime data transfer algorithm from component \"%s\" to \"%s\" (current component). The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:294:bool Coupling_connection::exchange_grid(Comp_comm_group_mgt_node *sender_comp_node, Comp_comm_group_mgt_node *receiver_comp_node, const char *grid_name)
Runtime_MGT/coupling_generator.cxx:352:		EXECUTION_REPORT(REPORT_ERROR, -1, buffer_content_size == 0, "software error in Coupling_connection::exchange_grid: wrong buffer_content_size");
Runtime_MGT/coupling_generator.cxx:355:			EXECUTION_REPORT(REPORT_ERROR, -1, receiver_original_grid->get_original_CoR_grid()->is_sigma_grid(), "Software error in Coupling_connection::exchange_grid regarding bottom_field_variation_type");
Runtime_MGT/coupling_generator.cxx:367:void Coupling_connection::exchange_remapping_setting(int i, Remapping_setting &field_remapping_setting)
Runtime_MGT/coupling_generator.cxx:384:void Coupling_connection::add_bottom_field_coupling_info(int field_connection_indx, Runtime_remapping_weights *V3D_remapping_weights, Remapping_setting *remapping_setting)
Runtime_MGT/coupling_generator.cxx:392:	bottom_field_coupling_info->field_connection_indx = field_connection_indx;
Runtime_MGT/coupling_generator.cxx:401:		EXECUTION_REPORT(REPORT_ERROR, -1, dynamic_V1D_remap_weight_of_operator != NULL, "Coupling_connection::add_bottom_field_coupling_info: do not have dynamic_V1D_remap_weight_of_operator");
Runtime_MGT/coupling_generator.cxx:403:		EXECUTION_REPORT(REPORT_ERROR, -1, bottom_field_coupling_info->bottom_field_inst->get_field_data()->get_coord_value_grid()->is_subset_of_grid(dynamic_V1D_remap_weight_of_operator->get_field_data_grid_src()) && bottom_field_coupling_info->bottom_field_inst->get_field_data()->get_coord_value_grid()->is_subset_of_grid(dynamic_V1D_remap_weight_of_operator->get_field_data_grid_dst()), "Software error in Coupling_connection::add_bottom_field_coupling_info: wrong surface field grid or wrong 2-D+1-D order");
Runtime_MGT/coupling_generator.cxx:405:			EXECUTION_REPORT(REPORT_ERROR, -1, dynamic_V1D_remap_weight_of_operator->get_field_data_grid_src()->get_sigma_grid_dynamic_surface_value_field() == bottom_field_coupling_info->bottom_field_inst->get_field_data(), "Software error in Coupling_connection::add_bottom_field_coupling_info: the surface field of the same grid has been set to different data fields");
Runtime_MGT/coupling_generator.cxx:410:				EXECUTION_REPORT(REPORT_ERROR, -1, dynamic_V1D_remap_weight_of_operator->get_field_data_grid_dst()->get_sigma_grid_dynamic_surface_value_field() == bottom_field_coupling_info->bottom_field_inst->get_field_data(), "Software error in Coupling_connection::add_bottom_field_coupling_info: the surface field of the same grid has been set to different data fields");
Runtime_MGT/coupling_generator.cxx:419:void Coupling_connection::generate_src_bottom_field_coupling_info()
Runtime_MGT/coupling_generator.cxx:427:			write_data_into_array_buffer(&(dst_bottom_fields_coupling_info[i]->field_connection_indx), sizeof(int), (char**)(&bottom_fields_indx), buffer_max_size, buffer_content_size);
Runtime_MGT/coupling_generator.cxx:434:			bottom_field_coupling_info->field_connection_indx = bottom_fields_indx[i];
Runtime_MGT/coupling_generator.cxx:436:			EXECUTION_REPORT(REPORT_ERROR, -1, src_original_grid->is_3D_grid() && src_original_grid->get_bottom_field_variation_type() == BOTTOM_FIELD_VARIATION_DYNAMIC || src_original_grid->get_bottom_field_variation_type() == BOTTOM_FIELD_VARIATION_STATIC, "Software error in Coupling_connection::generate_src_bottom_field_coupling_info: wrong grid");
Runtime_MGT/coupling_generator.cxx:439:			EXECUTION_REPORT(REPORT_ERROR, -1, original_grid_mgr->get_original_CoR_grid(bottom_field_coupling_info->bottom_field_inst->get_grid_id())->is_subset_of_grid(src_original_grid->get_original_CoR_grid()), "Software error in Coupling_connection::generate_src_bottom_field_coupling_info: wrong grid relation");
Runtime_MGT/coupling_generator.cxx:449:void Coupling_connection::generate_interpolation(bool has_frac_remapping)
Runtime_MGT/coupling_generator.cxx:456:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "start to generate interpolation between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:458:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "start to generate interpolation between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:469:			EXECUTION_REPORT(REPORT_ERROR, -1, fields_name.size() > 1 && i == fields_name.size()-1, "Software error in Coupling_connection::generate_interpolation");
Runtime_MGT/coupling_generator.cxx:528:		EXECUTION_REPORT_LOG(REPORT_LOG, src_comp_node->get_comp_id(), true, "finish generating interpolation between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:530:		EXECUTION_REPORT_LOG(REPORT_LOG, dst_comp_node->get_comp_id(), true, "finish generating interpolation between components \"%s\" and \"%s\". The connection id is %d", src_comp_interfaces[0].first, dst_comp_full_name, connection_id);
Runtime_MGT/coupling_generator.cxx:534:void Coupling_connection::exchange_connection_fields_info()
Runtime_MGT/coupling_generator.cxx:541:		write_connection_fields_info_into_array(import_interface, &dst_fields_info_array, buffer_max_size, dst_fields_info_array_size, &dst_timer, dst_inst_or_aver, dst_time_step_in_second, dst_current_year, dst_current_month, dst_current_day, dst_current_second);
Runtime_MGT/coupling_generator.cxx:543:		write_connection_fields_info_into_array(export_interface, &src_fields_info_array, buffer_max_size, src_fields_info_array_size, &src_timer, src_inst_or_aver, src_time_step_in_second, src_current_year, src_current_month, src_current_day, src_current_second);
Runtime_MGT/coupling_generator.cxx:547:	read_connection_fields_info_from_array(src_fields_info, src_fields_info_array, src_fields_info_array_size, comp_id, &src_timer, src_inst_or_aver, src_time_step_in_second, src_current_year, src_current_month, src_current_day, src_current_second);
Runtime_MGT/coupling_generator.cxx:549:	read_connection_fields_info_from_array(dst_fields_info, dst_fields_info_array, dst_fields_info_array_size, comp_id, &dst_timer, dst_inst_or_aver, dst_time_step_in_second, dst_current_year, dst_current_month, dst_current_day, dst_current_second);
Runtime_MGT/coupling_generator.cxx:550:	EXECUTION_REPORT(REPORT_ERROR, -1, fields_name.size() == src_fields_info.size() && fields_name.size() == dst_fields_info.size(), "Software error in Coupling_connection::exchange_connection_fields_info");
Runtime_MGT/coupling_generator.cxx:559:void Coupling_connection::read_fields_info_from_array(std::vector<Interface_field_info*> &fields_info, const char *array_buffer, long buffer_content_iter)
Runtime_MGT/coupling_generator.cxx:572:	EXECUTION_REPORT(REPORT_ERROR, -1, buffer_content_iter == 0, "Software error in Coupling_connection::read_fields_info_from_array: wrong buffer_content_iter");
Runtime_MGT/coupling_generator.cxx:576:void Coupling_connection::read_connection_fields_info_from_array(std::vector<Interface_field_info*> &fields_info, const char *array_buffer, long buffer_content_iter, int comp_id, Coupling_timer **timer, int &inst_or_aver, int &time_step_in_second,
Runtime_MGT/coupling_generator.cxx:590:	EXECUTION_REPORT(REPORT_ERROR, -1, fields_info.size() == fields_name.size(), "Software error in Coupling_connection::read_connection_fields_info_from_array: wrong size of fields_info");
Runtime_MGT/coupling_generator.cxx:594:void Coupling_connection::write_field_info_into_array(Field_mem_info *field, char **array, long &buffer_max_size, long &buffer_content_size)
Runtime_MGT/coupling_generator.cxx:599:	EXECUTION_REPORT(REPORT_ERROR, -1, field != NULL, "Coupling_connection::write_field_info_into_array");
Runtime_MGT/coupling_generator.cxx:617:void Coupling_connection::write_connection_fields_info_into_array(Inout_interface *inout_interface, char **array, long &buffer_max_size, long &buffer_content_size, Coupling_timer **timer, int &inst_or_aver, int &time_step_in_second, 
Runtime_MGT/coupling_generator.cxx:633:	components_time_mgrs->get_time_mgr(inout_interface->get_comp_id())->get_current_time(current_year, current_month, current_day, current_second, 0, "in Coupling_connection::write_connection_fields_info_into_array");
Runtime_MGT/coupling_generator.cxx:644:void Coupling_connection::exchange_bottom_fields_info()
Runtime_MGT/coupling_generator.cxx:663:	EXECUTION_REPORT(REPORT_ERROR, -1, dst_fields_info.size() == src_fields_info.size(), "Software error in Coupling_connection::exchange_bottom_fields_info");
Runtime_MGT/coupling_generator.cxx:679:Field_mem_info *Coupling_connection::get_bottom_field(bool export_or_import, int bottom_field_indx)
Runtime_MGT/coupling_generator.cxx:682:		EXECUTION_REPORT(REPORT_ERROR, -1, bottom_field_indx < src_bottom_fields_coupling_info.size(), "Software error in Coupling_connection::get_bottom_field: wrong bottom_field_indx");
Runtime_MGT/coupling_generator.cxx:686:		EXECUTION_REPORT(REPORT_ERROR, -1, bottom_field_indx < dst_bottom_fields_coupling_info.size(), "Software error in Coupling_connection::get_bottom_field: wrong bottom_field_indx");
Runtime_MGT/coupling_generator.cxx:693:bool Coupling_connection::get_is_bottom_field_dynamic(int field_indx)
Runtime_MGT/coupling_generator.cxx:840:		EXECUTION_REPORT(REPORT_ERROR, interface_ptr->get_comp_id(), words_are_the_same(redirection_element->Value(),"import_connection"), "When setting the redirection configuration of the import interface \"%s\" in the XML file \"%s\", the XML element for specifying the redirection configuration should be named \"import_connection\". Please verify the XML file arround the line number %d.", interface_name, XML_file_name, redirection_element->Row());
Runtime_MGT/coupling_generator.cxx:892:	sprintf(XML_file_name, "%s/all/coupling_connections/%s.coupling_connections.xml", comp_comm_group_mgt_mgr->get_config_root_dir(), comp_full_name);
Runtime_MGT/coupling_generator.cxx:895:		EXECUTION_REPORT_LOG(REPORT_LOG, -1, true, "As there is no import interface configuration file (the file name should be \"%s.coupling_connections.xml\") specified for the component \"%s\", the coupling procedures of the import/export interfaces of this component will be generated automatically", 
Runtime_MGT/coupling_generator.cxx:974:	all_coupling_connections.clear();
Runtime_MGT/coupling_generator.cxx:975:	all_IO_connections.clear();
Runtime_MGT/coupling_generator.cxx:984:void Coupling_generator::synchronize_latest_connection_id(MPI_Comm comm)
Runtime_MGT/coupling_generator.cxx:986:	int overall_latest_connection_id;
Runtime_MGT/coupling_generator.cxx:987:	MPI_Allreduce(&latest_connection_id, &overall_latest_connection_id, 1, MPI_INT, MPI_MAX, comm);
Runtime_MGT/coupling_generator.cxx:988:	latest_connection_id = overall_latest_connection_id;
Runtime_MGT/coupling_generator.cxx:997:	Coupling_connection *coupling_connection;
Runtime_MGT/coupling_generator.cxx:1008:	synchronize_latest_connection_id(comm);
Runtime_MGT/coupling_generator.cxx:1045:					coupling_connection = new Coupling_connection(coupling_generator->apply_connection_id());
Runtime_MGT/coupling_generator.cxx:1047:					strcpy(coupling_connection->dst_comp_full_name, all_comp_fullnames_for_coupling_generation[i]);
Runtime_MGT/coupling_generator.cxx:1048:					strcpy(coupling_connection->dst_interface_name, import_interfaces_of_a_component[j]->get_interface_name());
Runtime_MGT/coupling_generator.cxx:1049:					coupling_connection->fields_name.push_back(strdup(import_fields_name[k]));					
Runtime_MGT/coupling_generator.cxx:1058:								coupling_connection->src_comp_interfaces.push_back(src_comp_interface);
Runtime_MGT/coupling_generator.cxx:1072:										coupling_connection->src_comp_interfaces.push_back(src_comp_interface);
Runtime_MGT/coupling_generator.cxx:1079:					if (coupling_connection->src_comp_interfaces.size() > 0) {
Runtime_MGT/coupling_generator.cxx:1080:						report_string = new char [NAME_STR_SIZE*coupling_connection->src_comp_interfaces.size()];
Runtime_MGT/coupling_generator.cxx:1082:						for (int j = 0; j < coupling_connection->src_comp_interfaces.size(); j ++)
Runtime_MGT/coupling_generator.cxx:1083:							sprintf(report_string, "%s             %d) Component model is \"%s\", export interface is \"%s\"\n", report_string, j+1, coupling_connection->src_comp_interfaces[j].first, coupling_connection->src_comp_interfaces[j].second);					
Runtime_MGT/coupling_generator.cxx:1085:					if (coupling_connection->src_comp_interfaces.size() == 1) {
Runtime_MGT/coupling_generator.cxx:1086:						EXECUTION_REPORT_LOG(REPORT_LOG, -1, true, "Field \"%s\" of the import interface \"%s\" in the component model \"%s\" have one source as follows. %s\n", coupling_connection->fields_name[0], coupling_connection->dst_interface_name, coupling_connection->dst_comp_full_name, report_string);
Runtime_MGT/coupling_generator.cxx:1087:						all_coupling_connections.push_back(coupling_connection);
Runtime_MGT/coupling_generator.cxx:1089:					else if (coupling_connection->src_comp_interfaces.size() > 1)
Runtime_MGT/coupling_generator.cxx:1090:						EXECUTION_REPORT(REPORT_ERROR, -1, false, "Error happens when calling the API \"%s\" for coupling generation: Field \"%s\" of the import interface \"%s\" in the component model \"%s\" have more than one source as follows. Please verify.\n%s\n", API_label, coupling_connection->fields_name[0], coupling_connection->dst_interface_name, coupling_connection->dst_comp_full_name, report_string);
Runtime_MGT/coupling_generator.cxx:1091:					else delete coupling_connection;
Runtime_MGT/coupling_generator.cxx:1099:		for (int j, i = all_coupling_connections.size() - 1; i >= 0; i --) {
Runtime_MGT/coupling_generator.cxx:1101:				if (words_are_the_same(all_coupling_connections[i]->src_comp_interfaces[0].first, all_coupling_connections[j]->src_comp_interfaces[0].first) &&
Runtime_MGT/coupling_generator.cxx:1102:					words_are_the_same(all_coupling_connections[i]->src_comp_interfaces[0].second, all_coupling_connections[j]->src_comp_interfaces[0].second) &&
Runtime_MGT/coupling_generator.cxx:1103:					words_are_the_same(all_coupling_connections[i]->dst_comp_full_name, all_coupling_connections[j]->dst_comp_full_name) &&
Runtime_MGT/coupling_generator.cxx:1104:					words_are_the_same(all_coupling_connections[i]->dst_interface_name, all_coupling_connections[j]->dst_interface_name))
Runtime_MGT/coupling_generator.cxx:1107:				EXECUTION_REPORT(REPORT_ERROR, -1, all_coupling_connections[i]->fields_name.size() == 1,  "software error in Coupling_generator::generate_coupling_procedures: %d", all_coupling_connections[i]->fields_name.size());
Runtime_MGT/coupling_generator.cxx:1108:				all_coupling_connections[j]->fields_name.push_back(all_coupling_connections[i]->fields_name[0]);
Runtime_MGT/coupling_generator.cxx:1109:				all_coupling_connections.erase(all_coupling_connections.begin()+i);
Runtime_MGT/coupling_generator.cxx:1120:		for (int i = all_coupling_connections.size() - 1; i >= 0; i --) {
Runtime_MGT/coupling_generator.cxx:1121:			// all_coupling_connections[i]->src_comp_interfaces.size() is 1
Runtime_MGT/coupling_generator.cxx:1122:			for (int j = all_coupling_connections[i]->src_comp_interfaces.size()-1; j >= 0; j --) {
Runtime_MGT/coupling_generator.cxx:1123:				write_data_into_array_buffer(all_coupling_connections[i]->src_comp_interfaces[j].second, NAME_STR_SIZE, &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1124:				write_data_into_array_buffer(all_coupling_connections[i]->src_comp_interfaces[j].first, NAME_STR_SIZE, &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1126:			temp_int = all_coupling_connections[i]->src_comp_interfaces.size();
Runtime_MGT/coupling_generator.cxx:1128:			for (int j = all_coupling_connections[i]->fields_name.size() - 1; j >= 0; j --)
Runtime_MGT/coupling_generator.cxx:1129:				write_data_into_array_buffer(all_coupling_connections[i]->fields_name[j], NAME_STR_SIZE, &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1130:			temp_int = all_coupling_connections[i]->fields_name.size();
Runtime_MGT/coupling_generator.cxx:1132:			write_data_into_array_buffer(all_coupling_connections[i]->dst_interface_name, NAME_STR_SIZE, &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1133:			write_data_into_array_buffer(all_coupling_connections[i]->dst_comp_full_name, NAME_STR_SIZE, &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1134:			write_data_into_array_buffer(&(all_coupling_connections[i]->connection_id), sizeof(int), &temp_array_buffer, max_array_buffer_size, current_array_buffer_size);
Runtime_MGT/coupling_generator.cxx:1136:		temp_int = all_coupling_connections.size();
Runtime_MGT/coupling_generator.cxx:1142:		int num_connections, num_fields, num_sources;
Runtime_MGT/coupling_generator.cxx:1144:		read_data_from_array_buffer(&num_connections, sizeof(int), temp_array_buffer, buffer_content_iter, true);
Runtime_MGT/coupling_generator.cxx:1145:		for (int i = 0; i < num_connections; i ++) {
Runtime_MGT/coupling_generator.cxx:1146:			int connection_id;
Runtime_MGT/coupling_generator.cxx:1147:			read_data_from_array_buffer(&connection_id, sizeof(int), temp_array_buffer, buffer_content_iter, true);
Runtime_MGT/coupling_generator.cxx:1148:			coupling_connection = new Coupling_connection(connection_id);
Runtime_MGT/coupling_generator.cxx:1149:			read_data_from_array_buffer(coupling_connection->dst_comp_full_name, NAME_STR_SIZE, temp_array_buffer, buffer_content_iter, true);
Runtime_MGT/coupling_generator.cxx:1150:			read_data_from_array_buffer(coupling_connection->dst_interface_name, NAME_STR_SIZE, temp_array_buffer, buffer_content_iter, true);
Runtime_MGT/coupling_generator.cxx:1154:				coupling_connection->fields_name.push_back(strdup(field_name));	
Runtime_MGT/coupling_generator.cxx:1155:				EXECUTION_REPORT_LOG(REPORT_LOG, -1, true, "connection field name %s for interface %s", coupling_connection->dst_interface_name, field_name);
Runtime_MGT/coupling_generator.cxx:1164:				coupling_connection->src_comp_interfaces.push_back(src_comp_interface);
Runtime_MGT/coupling_generator.cxx:1166:			all_coupling_connections.push_back(coupling_connection);
Runtime_MGT/coupling_generator.cxx:1172:	for (int i = 0; i < all_coupling_connections.size(); i ++) {
Runtime_MGT/coupling_generator.cxx:1173:		all_coupling_connections[i]->generate_a_coupling_procedure(false);
Runtime_MGT/coupling_generator.cxx:1215:		components_IO_output_procedures_mgr->get_component_IO_output_procedures(sorted_comp_ids[i])->generate_coupling_connection(all_IO_connections, all_coupling_connections.size());
Runtime_MGT/coupling_generator.cxx:1218:	for (int i = 0; i < all_IO_connections.size(); i ++) {
Runtime_MGT/coupling_generator.cxx:1219:		all_IO_connections[i]->generate_a_coupling_procedure(false);
Runtime_MGT/coupling_generator.cxx:1370:	int current_connection_id, max_connection_id, remote_connection_id;
Runtime_MGT/coupling_generator.cxx:1431:			coupling_generator->synchronize_latest_connection_id(all_comp_nodes[i]->get_comm_group());
Runtime_MGT/coupling_generator.cxx:1434:	max_connection_id = coupling_generator->get_latest_connection_id();
Runtime_MGT/coupling_generator.cxx:1438:			MPI_Irecv(&remote_connection_id, 1, MPI_INT, all_comp_nodes[i]->get_local_proc_global_id(0), 10101, MPI_COMM_WORLD, &request_recv);
Runtime_MGT/coupling_generator.cxx:1442:			MPI_Isend(&max_connection_id, 1, MPI_INT, all_comp_nodes[0]->get_local_proc_global_id(0), 10101, MPI_COMM_WORLD, &request_send);
Runtime_MGT/coupling_generator.cxx:1446:			max_connection_id = remote_connection_id > max_connection_id? remote_connection_id : max_connection_id;
Runtime_MGT/coupling_generator.cxx:1453:			MPI_Isend(&max_connection_id, 1, MPI_INT, all_comp_nodes[i]->get_local_proc_global_id(0), 10101, MPI_COMM_WORLD, &request_send);
Runtime_MGT/coupling_generator.cxx:1455:			MPI_Irecv(&max_connection_id, 1, MPI_INT, all_comp_nodes[0]->get_local_proc_global_id(0), 10101, MPI_COMM_WORLD, &request_recv);
Runtime_MGT/coupling_generator.cxx:1463:			MPI_Bcast(&max_connection_id, 1, MPI_INT, 0, all_comp_nodes[i]->get_comm_group());
Runtime_MGT/coupling_generator.cxx:1464:	coupling_generator->set_latest_connection_id(max_connection_id);
Runtime_MGT/coupling_generator.cxx:1465:	EXECUTION_REPORT_LOG(REPORT_LOG, -1, true, "The coupling connection id in Coupling_generator::do_external_coupling_generation is %d", coupling_generator->get_latest_connection_id());
Runtime_MGT/coupling_generator.cxx:1494:		current_connection_id = coupling_generator->apply_connection_id();
Runtime_MGT/coupling_generator.cxx:1524:			union_comm = create_union_comm_common(union_comm, all_comp_nodes[i]->get_comm_group(), current_proc_id_in_union_comm, all_comp_nodes[i]->get_current_proc_local_id(), proc_global_ids_in_union_comm, proc_global_ids_in_current_comm, current_connection_id, NULL, NULL);
Runtime_MGT/coupling_generator.cxx:1590:	sprintf(XML_file_name, "%s/all/coupling_connections/%s.coupling_connections.xml", comp_comm_group_mgt_mgr->get_config_root_dir(), current_comp_full_name);
Runtime_MGT/coupling_generator.cxx:1662:	sprintf(XML_file_name, "%s/all/coupling_connections/%s.coupling_connections.xml", comp_comm_group_mgt_mgr->get_config_root_dir(), comp_comm_group_mgt_mgr->get_global_node_of_local_comp(comp_id, "in Coupling_generator::load_comps_full_names_from_config_file")->get_full_name());
Runtime_MGT/runtime_cumulate_average_algorithm.cxx:130:			EXECUTION_REPORT_LOG(REPORT_LOG, coupling_procedure->get_inout_interface()->get_comp_id(), true, "Detect the requirements for writing intermediate field data (%s) into restart data file for a Runtime_cumulate_average_algorithm of the export interface \"%s\" to the component model \"%s\" (%d)", label, coupling_procedure->get_inout_interface()->get_interface_name(), coupling_procedure->get_coupling_connection()->get_dst_comp_full_name(), cumulate_average_fields[i]->current_computing_count);
Runtime_MGT/runtime_cumulate_average_algorithm.cxx:132:			sprintf(temp_label, "%s_%s_%s", label, coupling_procedure->get_coupling_connection()->get_dst_comp_full_name(), coupling_procedure->get_coupling_connection()->get_dst_interface_name());
Runtime_MGT/runtime_cumulate_average_algorithm.cxx:134:			sprintf(temp_label, "restart write of field \"%s\" average algorithm of export interface \"%s\" to the import interface \"%s\" of the component model \"%s\"", cumulate_average_fields[i]->mem_info_dst->get_field_name(), coupling_procedure->get_inout_interface()->get_interface_name(), coupling_procedure->get_coupling_connection()->get_dst_interface_name(), coupling_procedure->get_coupling_connection()->get_dst_comp_full_name());
Runtime_MGT/runtime_cumulate_average_algorithm.cxx:160:				sprintf(temp_label, "%s_%s_%s", label, coupling_procedure->get_coupling_connection()->get_dst_comp_full_name(), coupling_procedure->get_coupling_connection()->get_dst_interface_name());
Runtime_MGT/runtime_cumulate_average_algorithm.cxx:162:				sprintf(temp_label, "restart read of field \"%s\" average algorithm of export interface \"%s\" to the import interface \"%s\" of the component model \"%s\"", cumulate_average_fields[i]->mem_info_dst->get_field_name(), coupling_procedure->get_inout_interface()->get_interface_name(), coupling_procedure->get_coupling_connection()->get_dst_interface_name(), coupling_procedure->get_coupling_connection()->get_dst_comp_full_name());
Runtime_MGT/coupling_generator.h:50:	int field_connection_indx;
Runtime_MGT/coupling_generator.h:55:class Coupling_connection
Runtime_MGT/coupling_generator.h:63:		int connection_id;
Runtime_MGT/coupling_generator.h:95:		void write_connection_fields_info_into_array(Inout_interface *, char **, long &, long &, Coupling_timer**, int&, int&, int&, int&, int&, int&);	
Runtime_MGT/coupling_generator.h:97:		void read_connection_fields_info_from_array(std::vector<Interface_field_info*>&, const char *, long, int, Coupling_timer **, int&, int&, int&, int&, int&, int&);
Runtime_MGT/coupling_generator.h:98:		void exchange_connection_fields_info();
Runtime_MGT/coupling_generator.h:107:		Coupling_connection(int);
Runtime_MGT/coupling_generator.h:108:		~Coupling_connection();
Runtime_MGT/coupling_generator.h:178:		std::vector<Coupling_connection*> all_coupling_connections;
Runtime_MGT/coupling_generator.h:179:        std::vector<Coupling_connection*> all_IO_connections;
Runtime_MGT/coupling_generator.h:180:		int latest_connection_id;
Runtime_MGT/coupling_generator.h:183:		void generate_components_connections();		
Runtime_MGT/coupling_generator.h:188:		Coupling_generator() { latest_connection_id = 1; import_field_index_lookup_table = NULL; export_field_index_lookup_table = NULL; }
Runtime_MGT/coupling_generator.h:193:		int apply_connection_id() {  return (++latest_connection_id); }
Runtime_MGT/coupling_generator.h:194:		int get_latest_connection_id() { return latest_connection_id; }
Runtime_MGT/coupling_generator.h:195:		void set_latest_connection_id(int connection_id) { latest_connection_id = connection_id; }
Runtime_MGT/coupling_generator.h:196:		void synchronize_latest_connection_id(MPI_Comm);
Runtime_MGT/runtime_trans_algorithm.cxx:53:Runtime_trans_algorithm::Runtime_trans_algorithm(bool send_or_receive, int num_transfered_fields, Field_mem_info ** fields_mem, Routing_info ** routers, MPI_Comm comm, int * ranks, int connection_id)
Runtime_MGT/runtime_trans_algorithm.cxx:60:	this->comm_tag = connection_id;
Runtime_MGT/runtime_remapping_weights_mgt.cxx:146:		EXECUTION_REPORT(REPORT_ERROR, -1, dst_original_grid->get_H2D_sub_CoR_grid() == NULL && dst_decomp_info == NULL, "Software error in Coupling_connection::generate_interpolation: conflict between grid and decomp");
Runtime_MGT/runtime_remapping_weights_mgt.cxx:257:			EXECUTION_REPORT(REPORT_ERROR, -1, dynamic_V1D_remap_weight_of_operator->get_field_data_grid_dst()->get_sigma_grid_dynamic_surface_value_field() == memory_manager->get_field_instance(get_dst_original_grid()->get_bottom_field_id())->get_field_data(), "Software error in Coupling_connection::add_bottom_field_coupling_info: the surface field of the same grid has been set to different data fields");
Runtime_MGT/runtime_remap_algorithm.cxx:18:Runtime_remap_algorithm::Runtime_remap_algorithm(Runtime_remapping_weights *runtime_remapping_weights, Field_mem_info *src_field_instance, Field_mem_info *dst_field_instance, int connection_id)
Runtime_MGT/runtime_remap_algorithm.cxx:26:		true_src_field_instance = memory_manager->alloc_mem(specified_src_field_instance, BUF_MARK_REMAP_DATATYPE_TRANS_SRC, connection_id, DATA_TYPE_DOUBLE, false);
Runtime_MGT/runtime_remap_algorithm.cxx:27:		true_dst_field_instance = memory_manager->alloc_mem(specified_dst_field_instance, BUF_MARK_REMAP_DATATYPE_TRANS_DST, connection_id, DATA_TYPE_DOUBLE, false);
Parallel_MGT/compset_communicators_info_mgt.cxx:706:	sprintf(active_coupling_connections_dir, "%s/CCPL_dir/run/data/all/active_coupling_connections", root_working_dir);
Parallel_MGT/compset_communicators_info_mgt.cxx:707:	create_directory(active_coupling_connections_dir, MPI_COMM_WORLD, current_proc_global_id == 0, true);	
Parallel_MGT/compset_communicators_info_mgt.h:137:		char active_coupling_connections_dir[NAME_STR_SIZE];
Parallel_MGT/compset_communicators_info_mgt.h:173:		const char *get_active_coupling_connections_dir() { return active_coupling_connections_dir; }
Data_MGT/IO_field_mgt.cxx:241:Coupling_connection *IO_output_procedure::generate_coupling_connection(int connection_id)
Data_MGT/IO_field_mgt.cxx:243:	Coupling_connection *coupling_connection = NULL;
Data_MGT/IO_field_mgt.cxx:246:		coupling_generator->synchronize_latest_connection_id(comp_comm_group_mgt_mgr->get_comm_group_of_local_comp(comp_id, ""));
Data_MGT/IO_field_mgt.cxx:247:		coupling_connection = new Coupling_connection(coupling_generator->apply_connection_id());
Data_MGT/IO_field_mgt.cxx:248:		strcpy(coupling_connection->dst_comp_full_name, comp_comm_group_mgt_mgr->get_global_node_of_local_comp(comp_id, "in IO_output_procedure::generate_coupling_connection")->get_full_name());
Data_MGT/IO_field_mgt.cxx:249:		strcpy(coupling_connection->dst_interface_name, import_interface->get_interface_name());
Data_MGT/IO_field_mgt.cxx:251:		src_comp_interface.first = strdup(coupling_connection->dst_comp_full_name);
Data_MGT/IO_field_mgt.cxx:253:		coupling_connection->src_comp_interfaces.push_back(src_comp_interface);
Data_MGT/IO_field_mgt.cxx:257:			coupling_connection->fields_name.push_back(strdup(import_fields_name[k]));
Data_MGT/IO_field_mgt.cxx:260:	return coupling_connection;
Data_MGT/IO_field_mgt.cxx:291:void Component_IO_output_procedures::generate_coupling_connection(std::vector<Coupling_connection*> &all_IO_connections, int basic_connection_id)
Data_MGT/IO_field_mgt.cxx:294:		Coupling_connection *coupling_connection = IO_output_procedures[i]->generate_coupling_connection(basic_connection_id+IO_output_procedures.size());
Data_MGT/IO_field_mgt.cxx:295:		if (coupling_connection != NULL)
Data_MGT/IO_field_mgt.cxx:296:			all_IO_connections.push_back(coupling_connection);
Data_MGT/original_grid_mgt.cxx:356:	sprintf(XML_file_name, "%s/all/coupling_connections/%s.coupling_connections.xml", comp_comm_group_mgt_mgr->get_config_root_dir(), comp_comm_group_mgt_mgr->get_global_node_of_local_comp(comp_id, "in register_H2D_grid_via_comp")->get_full_name());
Data_MGT/original_grid_mgt.cxx:358:	EXECUTION_REPORT(REPORT_ERROR, comp_id, XML_file != NULL, "Error happens when calling the C-Coupler API \"CCPL_register_H2D_grid_from_another_component\" to register an H2D grid \"%s\": the coupling connection configuration file (\"%s\") does not exist. The API call is at the model code with the annotation \"%s\". ", grid_name, XML_file_name, annotation);
Data_MGT/original_grid_mgt.cxx:374:			const char *xml_grid_name = get_XML_attribute(comp_id, 80, grid_XML_element, "local_grid_name", XML_file_name, line_number, "grid name of the current component", "the coupling connection configuration file", true);
Data_MGT/original_grid_mgt.cxx:376:				another_comp_full_name = get_XML_attribute(comp_id, 512, grid_XML_element, "another_comp_full_name", XML_file_name, line_number, "the full name of the another component", "the coupling connection configuration file", true);
Data_MGT/original_grid_mgt.cxx:377:				another_comp_grid_name = get_XML_attribute(comp_id, 80, grid_XML_element, "another_comp_grid_name", XML_file_name, line_number, "the grid name of the another component", "the coupling connection configuration file", true);
Data_MGT/original_grid_mgt.cxx:378:				EXECUTION_REPORT(REPORT_ERROR, comp_id, strlen(another_comp_grid_name) > 0, "Error happens when calling the C-Coupler API \"CCPL_register_H2D_grid_from_another_component\" to register an H2D grid \"%s\": the coupling connection configuration file (\"%s\") specifies an empty name of the remote grid. Please check the XML file around line number %d", grid_name, XML_file_name, line_number);
Data_MGT/original_grid_mgt.cxx:384:	EXECUTION_REPORT(REPORT_ERROR, comp_id, another_comp_full_name != NULL && another_comp_grid_name != NULL, "Error happens when calling the C-Coupler API \"CCPL_register_H2D_grid_from_another_component\" to register an H2D grid \"%s\": the coupling connection configuration file (\"%s\") does not contain the information for this grid. The API call is at the model code with the annotation \"%s\". ", grid_name, XML_file_name, annotation);
Data_MGT/original_grid_mgt.cxx:387:	EXECUTION_REPORT_LOG(REPORT_LOG, comp_id, true, "Wait to read NetCDF file \"%s\" to register H2D grid \"%s\" based on the grid \"%s\" of remote component \"%s\". Dead wait will be encounted if the full name of the remote component is wrong. So please make sure the full name of the remote component is correct in the the coupling connection configuration file (\"%s\")", nc_file_name, grid_name, another_comp_grid_name, another_comp_full_name, XML_file_name);
Data_MGT/IO_field_mgt.h:20:class Coupling_connection;
Data_MGT/IO_field_mgt.h:64:		Coupling_connection *generate_coupling_connection(int);
Data_MGT/IO_field_mgt.h:95:		void generate_coupling_connection(std::vector<Coupling_connection*> &, int);

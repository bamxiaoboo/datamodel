diff --git a/src/control/filenames.F90 b/src/control/filenames.F90
index 4008783..55cc2d1 100755
--- a/src/control/filenames.F90
+++ b/src/control/filenames.F90
@@ -98,7 +98,7 @@ contains
         end if
 
         if (nrefrq == 1 .and. len_trim(rest_pfile) == 0) then
-            rest_pfile = 'gamil.'//trim(caseid)//'.rpointer'
+            rest_pfile = trim(home_dir)//'/gamil.'//trim(caseid)//'.rpointer'
         end if
         !
         ! Set archive_dir if not initialized, and make sure has trailing "/"
diff --git a/src/control/gamil.F90 b/src/control/gamil.F90
index 5e90ea7..fcf40a4 100755
--- a/src/control/gamil.F90
+++ b/src/control/gamil.F90
@@ -23,7 +23,7 @@ program gamil
     use history,      only: bldfld, intht
     use units
     use restart,      only: read_restart
-    use time_manager, only: get_nstep, is_first_restart_step
+    use time_manager, only: get_nstep, is_first_restart_step, get_step_size
     use phys_buffer ! added by SHI Xiangjun and LIU Li
     use ppgrid,       only: pcols, pverp, begchunk, endchunk
     use comsrf,       only: fld_kvh ! added by LIU Li
@@ -37,9 +37,8 @@ program gamil
     use cpl_fields_mod    !
 #endif
 
-    use c_coupler_interface_mod
-    use register_decompositions_mod
-    use register_private_variables_mod
+    use CCPL_interface_mod
+    use coupling_chemistry_model_mod
 
     implicit none
 
@@ -67,6 +66,7 @@ program gamil
     integer nstep           ! Current timestep number.
     integer kvh_idx ! added by LIU Li
     integer i
+    integer :: gamil_mpicom,export_interface_id,time_stp
     !------------------------------Externals--------------------------------
 #if ( defined SUNOS )
     !integer iexcept, ieee_handler
@@ -97,7 +97,9 @@ program gamil
     call t_startf('total')
     call t_startf('initialization')
 
-    call c_coupler_initialize(mpicom)
+    !call c_coupler_initialize(mpicom)
+    mpicom = -1
+    call register_gamil_component(mpicom)
     !
     ! Initialize internal/external MPI if appropriate
     !
@@ -179,10 +181,12 @@ program gamil
         call intht           ! set up history tape contents for this run
     case (1)                ! restart run
         call read_restart    ! read restart file(s)
+        call CCPL_start_restart_read_IO(gamil_comp_id)
         call inti            ! physics init
         call bldfld          ! master field list
     case (3)                ! branch run
         call read_restart    ! read restart file(s), minus history info
+        call CCPL_start_restart_read_IO(gamil_comp_id)
         call inti            ! physics init
         call bldfld          ! master field list
         call intht           ! set up history tape contents for this run
@@ -190,10 +194,9 @@ program gamil
         write(6, *)' nsrest=', nsrest, ' must be 0, 1, or 3'
         call endrun
     end select
-
-    call register_decompositions
-    call register_static_variables
-
+    time_stp = get_step_size()
+    call register_component_coupling_configuration(mpicom, "gamil", export_interface_id, time_stp)
+    !call CCPL_end_coupling_configuration(gamil_comp_id, annotation = "component gamil ends registration")
     !
     ! Initialize external models or datasets depending upon whether coupled
     !
@@ -247,6 +250,7 @@ program gamil
     call mpifinalize
 #endif
 
+call CCPL_finalize(.true.)
 #if ( defined SPMD )
     iu = getunit ()
     write(filenam,'(a10,i3.3)') 'spmdstats.', iam
@@ -258,5 +262,4 @@ program gamil
 #endif
 
     stop
-
 end program gamil
diff --git a/src/control/history.F90 b/src/control/history.F90
index 10c1a3a..8b61d09 100755
--- a/src/control/history.F90
+++ b/src/control/history.F90
@@ -1469,7 +1469,7 @@ CONTAINS
          end select
       end if
 
-#ifdef DEBUG
+!!#ifdef DEBUG
       write(6,*)"INIFLD: field ", tape(t)%hlist(n)%field%name, " added as ", "field number ", n," on tape ", t
       write(6,*)"units=",tape(t)%hlist(n)%field%units
       write(6,*)"numlev=",tape(t)%hlist(n)%field%numlev
@@ -1477,7 +1477,7 @@ CONTAINS
       write(6,*)"time_op=",tape(t)%hlist(n)%time_op
       write(6,*)"hbuf_prec=",tape(t)%hlist(n)%hbuf_prec
       write(6,*)"hwrt_prec=",tape(t)%hlist(n)%hwrt_prec
-#endif
+!!#endif
 
       return
    end subroutine inifld
@@ -1847,10 +1847,12 @@ CONTAINS
       call add_default ("CPLPRCER", 1, " ")
 #endif
 
+      if (.false.) then !added yxz
       do m=1,2
          call add_default (cnst_name(m), 1, " ")
          call add_default (sflxnam(m),   1, " ")
       end do
+      
       do m=3,pcnst+pnats     !sxj ---------------2008-11-12
          if ((cnst_name(m)=="CLDLIQ").or.(cnst_name(m)=="CLDICE")) then   ! sxj---
             call add_default (cnst_name(m), 1, " ")
@@ -1861,6 +1863,7 @@ CONTAINS
             call add_default (sflxnam(m),   1, " ")
          endif
       enddo
+      end if
 
 !!  (wanhui 2003.06.16)
 
@@ -2951,9 +2954,9 @@ end function sec2hms
       type (dim_index_3d) :: dimind  ! 3-D dimension index
 
       numlev   = tape(t)%hlist(f)%field%numlev
-#ifdef DEBUG
+!!#ifdef DEBUG
       write(6,*)"DUMP_FIELD: writing ",tape(t)%hlist(f)%field%name
-#endif
+!!#endif
       start(1) = 1
       start(2) = 1
 
@@ -2988,13 +2991,13 @@ end function sec2hms
       endif
 #endif
 
-#ifdef DEBUG
+!!#ifdef DEBUG
       write(6,*)"DUMP_FIELD: writing time indx ", nfils(t), " field id", varid(f,t), &
                 " name ", tape(t)%hlist(f)%field%name
       write(6,*)"start=",start
       write(6,*)"count=",count
       call print_memusage ()
-#endif
+!!#endif
 !
 ! Transpose to COORDS order
 !
@@ -3083,7 +3086,9 @@ end function sec2hms
       if (masterproc) then
          dimind = dim_index_3d (1,plon,1,numlev,1,plat) ! xzybuf order
          call xzy_to_xyz (xyzbuf, xzybuf, dimind)
+         print *,"before put vara"
          call wrap_put_vara_hbuf (nfid(t), varid(f,t), start, count, xyzbuf)
+         print *,"after put vara"
          call deallocate_hbuf (xzybuf)
          call deallocate_hbuf (xyzbuf)
       else
@@ -3121,10 +3126,10 @@ end function sec2hms
       integer count1             ! count values required by nf_put_vara
       integer startc(2)          ! start values required by nf_put_vara (character)
       integer countc(2)          ! count values required by nf_put_vara (character)
-#ifdef DEBUG
+!!#ifdef DEBUG
       integer begdim3
       integer enddim3
-#endif
+!!#endif
 
       integer :: yr, mon, day      ! year, month, and day components of a date
       integer :: nstep             ! current timestep number
@@ -3218,9 +3223,9 @@ end function sec2hms
                call datetime (cdate, ctime)
                call wrap_put_vara_text (nfid(t), date_writtenid(t), startc, countc, cdate)
                call wrap_put_vara_text (nfid(t), time_writtenid(t), startc, countc, ctime)
-#ifdef DEBUG
+!!#ifdef DEBUG
                ret = nf_sync (nfid(t))
-#endif
+!!#endif
             end if
 
 !$OMP PARALLEL DO PRIVATE (F)
@@ -3233,7 +3238,7 @@ end function sec2hms
 !
             call t_startf ("dump_field")
             do f=1,nflds(t)
-#ifdef DEBUG
+!!#ifdef DEBUG
                begdim3 = tape(t)%hlist(f)%field%begdim3
                enddim3 = tape(t)%hlist(f)%field%enddim3
                if (tape(t)%hlist(f)%hbuf_prec == 8) then
@@ -3241,9 +3246,15 @@ end function sec2hms
                else
                   write(6,*)"WSHIST:",tape(t)%hlist(f)%field%name,"(1,1,1)=",tape(t)%hlist(f)%hbuf%buf4(1,1,begdim3)
                end if
-#endif
+!!#endif
+                !!if (tape(t)%hlist(f)%field%name .eq. "CLDICE") then
+                !!    print *,"CLDICE",tape(t)%hlist(f)%hbuf%buf8(:,:,:)
+                !!end if
+                !!print *,"before dump"
                call dump_field (f, t)
+               !!print *,"after dump"
             end do
+            !!print *,"after loop"
             call t_stopf ("dump_field")
 !
 ! Zero history buffers and accumulators now that the fields have been written.
@@ -5043,8 +5054,10 @@ end function sec2hms
       if (hbuf_prec == 8) then
          nullify  (hbuf%buf4)
          allocate (hbuf%buf8(dimind%beg1:dimind%end1, dimind%beg2:dimind%end2))
+         hbuf%buf8=0.0
       else
          allocate (hbuf%buf4(dimind%beg1:dimind%end1, dimind%beg2:dimind%end2))
+         hbuf%buf4=0.0
          nullify  (hbuf%buf8)
       end if
 
@@ -5067,9 +5080,11 @@ end function sec2hms
          nullify  (hbuf%buf4)
          allocate (hbuf%buf8(dimind%beg1:dimind%end1, dimind%beg2:dimind%end2, &
                              dimind%beg3:dimind%end3))
+         hbuf%buf8=0.0
       else
          allocate (hbuf%buf4(dimind%beg1:dimind%end1, dimind%beg2:dimind%end2, &
                              dimind%beg3:dimind%end3))
+         hbuf%buf4=0.0
          nullify  (hbuf%buf8)
       end if
 
diff --git a/src/control/parse_namelist.F90 b/src/control/parse_namelist.F90
index bef8018..9856209 100755
--- a/src/control/parse_namelist.F90
+++ b/src/control/parse_namelist.F90
@@ -517,6 +517,7 @@ subroutine parse_namelist
             write(6,*)'PARSE_NAMELIST: Namelist variable CASEID must be set'
             call endrun
         end if
+   write(*,*) 'dtime is ', dtime
 
         lastchar = len(caseid)
         if (caseid(lastchar:lastchar) /= ' ') then
diff --git a/src/control/spmdinit.F90 b/src/control/spmdinit.F90
index e27f380..a0761cb 100755
--- a/src/control/spmdinit.F90
+++ b/src/control/spmdinit.F90
@@ -59,9 +59,9 @@ subroutine spmdinit
 #ifdef COUP_CSM
    !mpicom  = shr_msg_comm_atm ! For FGOALS2.0
 #else
-   call mpi_comm_dup(mpi_comm_world, mpicom, ier)
+   !call mpi_comm_dup(mpi_comm_world, mpicom, ier)
 #endif
-!
+
 ! Get my id
 !
    call mpi_comm_rank (mpicom, iam, ier)
diff --git a/src/control/time_manager.F90 b/src/control/time_manager.F90
index 3249bca..a7fe197 100755
--- a/src/control/time_manager.F90
+++ b/src/control/time_manager.F90
@@ -17,7 +17,6 @@ module time_manager
         esmf_timemgrrestartwrite, esmf_timemgrrestartread
    use string_utils, only: to_upper
    use dycore, only: dycore_is
-   use c_coupler_interface_mod
 #ifdef SPMD
    use mpishorthand, only: mpicom, mpiint, mpilog
 #endif
@@ -124,8 +123,8 @@ subroutine timemgr_preset()
 
    if ( dtime == uninit_int ) then
       if (dycore_is ('EUL')) then
-         dtime  = c_coupler_get_step_size()
-         dtdy   = dtime/5                 !!(wh 2004.04.14)
+         dtime  = 1200
+         dtdy   = 240.0                 !!(wh 2004.04.14)
       else if (dycore_is ('SLD')) then
          dtime  = 3600
       else if (dycore_is ('LR')) then
diff --git a/src/control/wrap_nf.F90 b/src/control/wrap_nf.F90
index 84aeb0a..c86d901 100755
--- a/src/control/wrap_nf.F90
+++ b/src/control/wrap_nf.F90
@@ -730,7 +730,7 @@ subroutine handle_error(ret)
 
     integer, intent(in) :: ret
 
-    write(6, *) nf_strerror(ret)
+    write(6, *) ret, nf_strerror(ret)
 
     call endrun
 
diff --git a/src/couple/c_coupler/coupling_chemistry_model_mod.F90 b/src/couple/c_coupler/coupling_chemistry_model_mod.F90
new file mode 100755
index 0000000..1860ea5
--- /dev/null
+++ b/src/couple/c_coupler/coupling_chemistry_model_mod.F90
@@ -0,0 +1,448 @@
+!***************************************************************
+!  This is a source file of GAMIL, which registers all variables
+!  with chemistry model into C-Coupler library for coupling. 
+!  This file was initially finished by Dr. Li Liu. If you have 
+!  any problem, please contact Dr. Li Liu via 
+!  liuli-cess@tsinghua.edu.cn
+!***************************************************************
+
+
+#include <misc.h>
+#include <params.h>
+
+
+module coupling_chemistry_model_mod
+
+    use shr_kind_mod, only: r8 => shr_kind_r8
+    use ppgrid
+    use phys_grid,    only: read_chunk_from_field, write_field_from_chunk, get_ncols_p
+    use pmgrid,       only: masterproc, plevp
+    use prognostics,  only: ptimelevels, n3, n3m2
+    use buffer
+    use radae,        only: abstot_3d, absnxt_3d, emstot_3d, initialize_radbuffer
+    use comsrf, only: surface_state2d, srfflx_state2d
+    use ioFileMod
+    use phys_buffer
+    use CCPL_interface_mod
+
+    implicit none
+    !
+    ! Public interfaces
+    !
+
+    type, private :: fld_container_for_coupling_chem
+        character(256)        name
+        integer              num_lev
+        real(r8), pointer :: fld_buf(:,:,:)
+    end type fld_container_for_coupling_chem
+
+    integer, private, parameter                    :: max_num_chem_flds = 128
+    integer, private                               :: num_registered_flds_for_chem=0
+    type(fld_container_for_coupling_chem), public :: registered_flds_for_chem(max_num_chem_flds)
+    integer, public                                :: gamil_comp_id
+
+    integer, private          :: decomp_id, grid_h2d_id, grid_v1d_id
+    integer, private          :: grid_3d_id, grid_mid_3d_id
+
+    real(r8), private,allocatable :: PRECCON_array(:,:) 
+    real(r8), private,allocatable :: PRECTOT_array(:,:) 
+    real(r8), private,allocatable :: PRECSNO_array(:,:) 
+    real(r8), private,allocatable :: RADLWG_array(:,:) 
+    real(r8), private,allocatable :: RADSWG_array(:,:) 
+    real(r8), private,allocatable :: FRLAKE_array(:,:) 
+    real(r8), private,allocatable :: FRLANDIC_array(:,:) 
+
+    integer, private, allocatable :: flds_id(:)
+
+    interface out_fld_for_coupling_chem ; module procedure &
+        out_fld_for_coupling_chem_3D, &
+        out_fld_for_coupling_chem_2D, &
+        out_fld_for_coupling_chem_2D_lchnk, &
+        out_fld_for_coupling_chem_1D_lchnk
+    end interface
+
+
+
+
+CONTAINS
+
+
+    subroutine register_gamil_component(comm)
+        integer, intent(inout) :: comm
+        INTEGER            :: IOS
+        gamil_comp_id = CCPL_register_component(-1, "gamil", "atm", comm, change_dir=.true., annotation = "register atm model gamil")
+        open(unit=5,file="gamil.stdin" ,status='OLD', IOSTAT=IOS)
+
+    end subroutine register_gamil_component
+
+    subroutine register_grids_decomps
+        use ppgrid
+        use phys_grid
+        use rgrid,          only: nlon                                                  ! reduced grid
+        use commap
+        use dycore, only: dycore_is
+        use shr_kind_mod,   only: shr_kind_in
+        use CCPL_interface_mod
+        implicit none
+#include <comhyb.h>
+#include <pdyn.h>
+
+        real*8 area(plon,plat)
+        real*8 clondeg(plon,plat)
+        real*8 clatdeg(plon,plat)
+        integer(SHR_KIND_IN) ::  mask(plon,plat)       ! Mask of valid data
+        !integer :: mask(plon,plat)
+        integer lat, lon, lchnk
+        real                               :: min_lon, min_lat, max_lon, max_lat
+        integer :: mid_v1d_grid_id
+        integer, allocatable               :: local_grid_cell_indexes(:)
+        integer :: ncol                  ! number of columns in current chunk
+        integer :: i
+        integer :: lats(pcols)           ! array of latitude indices
+        integer :: lons(pcols)           ! array of longitude indices
+
+        mask(:,:) = 0
+        clatdeg(:,:) = -999.0
+        clondeg(:,:) = -999.0
+        do lat = 1, plat
+        mask(1:nlon(lat),lat) = 1
+        clatdeg(1:nlon(lat),lat) = latdeg(lat)
+        clondeg(1:nlon(lat),lat) = londeg(1:nlon(lat),lat)
+        end do
+
+        min_lon = minval(londeg)
+        max_lon = maxval(londeg)
+        min_lat = minval(latdeg)
+        max_lat = maxval(latdeg)
+
+        grid_h2d_id = CCPL_register_H2D_grid_via_global_data(gamil_comp_id, "gamil_H2D_grid", "LON_LAT", "degrees", "cyclic", plon, plat, 0.0, 360.0, -90.0, 90.0, clondeg, clatdeg, mask,annotation="register gamil H2D grid")
+        grid_v1d_id = CCPL_register_V1D_SIGMA_grid_via_model_data(gamil_comp_id, "gamil_V1D_grid", "hPa", pmtop/100.0, sig, "register gamil v1d grid")
+        grid_3d_id = CCPL_register_MD_grid_via_multi_grids(gamil_comp_id, "gamil_3D_grid", grid_H2D_id, grid_V1D_id, annotation="register a gamil 3-d grid")
+        call CCPL_register_mid_point_grid(grid_3d_id, grid_mid_3d_id, mid_v1d_grid_id,annotation = "register a mid point grid")
+
+!register decomposition
+       allocate(local_grid_cell_indexes(pcols*(endchunk-begchunk+1)))
+       local_grid_cell_indexes=0
+       do lchnk = begchunk,endchunk
+          ncol = get_ncols_p(lchnk)
+          call get_lon_all_p(lchnk, ncol, lons)
+          call get_lat_all_p(lchnk, ncol, lats)
+          do i=1,ncol
+              local_grid_cell_indexes((lchnk-begchunk)*pcols+i)=(lats(i)-1)*(nx-2)+lons(i)
+          end do
+       end do
+       decomp_id = CCPL_register_normal_parallel_decomp("decomp_gamil_grid", grid_H2D_id, pcols*(endchunk-begchunk+1), local_grid_cell_indexes, "allocate for gamil grid")
+       deallocate(local_grid_cell_indexes)
+
+    end subroutine register_grids_decomps
+
+    subroutine add_fld_for_coupling_chem(fld_name, units, long_name, num_lev, fld_id)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        character(len=*), intent(in) :: units 
+        character(len=*), intent(in) :: long_name
+        integer         , intent(in) :: num_lev
+        integer                      :: i
+        integer         , intent(out):: fld_id
+
+        num_registered_flds_for_chem = num_registered_flds_for_chem + 1
+        if (num_registered_flds_for_chem .gt. max_num_chem_flds) then
+            call CCPL_report_error(gamil_comp_id, .false., "GAMIL register too many fields for coupling chemistry model", "too many fields")
+        endif
+        registered_flds_for_chem(num_registered_flds_for_chem)%name      = fld_name
+        registered_flds_for_chem(num_registered_flds_for_chem)%num_lev   = num_lev
+        allocate(registered_flds_for_chem(num_registered_flds_for_chem)%fld_buf(pcols,begchunk:endchunk,num_lev))
+        registered_flds_for_chem(num_registered_flds_for_chem)%fld_buf(:,:,:) = 0.0
+
+        if (num_lev .eq. 1) then
+            fld_id = CCPL_register_field_instance(registered_flds_for_chem(num_registered_flds_for_chem)%fld_buf, fld_name, decomp_id, grid_h2d_id, 0, CCPL_TAG_CPL_REST, units, "register field instance of " // fld_name)
+        else if (num_lev .eq. pver) then
+            fld_id = CCPL_register_field_instance(registered_flds_for_chem(num_registered_flds_for_chem)%fld_buf, fld_name, decomp_id, grid_mid_3d_id, 0, CCPL_TAG_CPL_REST, units, "register field instance of " // fld_name)
+        else if (num_lev .eq. pverp) then
+            fld_id = CCPL_register_field_instance(registered_flds_for_chem(num_registered_flds_for_chem)%fld_buf, fld_name, decomp_id, grid_3d_id, 0, CCPL_TAG_CPL_REST, units, "register field instance of " // fld_name)
+        else 
+            call CCPL_report_error(gamil_comp_id, .false., "number of levels of fields for coupling chemistry model is not supported", "field level wrong")
+        endif
+
+    end subroutine add_fld_for_coupling_chem
+
+
+
+    subroutine copy_fld_for_coupling_chem_3D(field_in, field_out, num_lev)
+        implicit none
+        real(r8), intent(in)         :: field_in(pcols,begchunk:endchunk,num_lev) 
+        real(r8), intent(out)        :: field_out(pcols,begchunk:endchunk,num_lev) 
+        integer , intent(in)         :: num_lev
+
+
+        field_out(:,:,:) = field_in(:,:,:)
+ 
+    end subroutine copy_fld_for_coupling_chem_3D
+
+
+
+    subroutine copy_fld_for_coupling_chem_2D(field_in, field_out, num_lev)
+        implicit none
+        real(r8), intent(in)         :: field_in(pcols,begchunk:endchunk) 
+        real(r8), intent(out)        :: field_out(pcols,begchunk:endchunk,num_lev) 
+        integer , intent(in)         :: num_lev
+
+
+        field_out(:,:,1) = field_in(:,:)
+ 
+    end subroutine copy_fld_for_coupling_chem_2D
+
+
+
+    subroutine copy_fld_for_coupling_chem_2D_lchnk(field_in, field_out, num_lev, lchnk)
+        implicit none
+        real(r8), intent(in)         :: field_in(pcols,num_lev) 
+        real(r8), intent(out)        :: field_out(pcols,begchunk:endchunk,num_lev) 
+        integer , intent(in)         :: num_lev
+        integer , intent(in)         :: lchnk
+
+
+        field_out(:,lchnk,:) = field_in(:,:)
+ 
+    end subroutine copy_fld_for_coupling_chem_2D_lchnk
+
+
+
+    subroutine copy_fld_for_coupling_chem_1D_lchnk(field_in, field_out, num_lev, lchnk)
+        implicit none
+        real(r8), intent(in)         :: field_in(pcols) 
+        real(r8), intent(out)        :: field_out(pcols,begchunk:endchunk,num_lev) 
+        integer , intent(in)         :: num_lev
+        integer , intent(in)         :: lchnk
+
+
+        field_out(:,lchnk,1) = field_in(:)
+ 
+    end subroutine copy_fld_for_coupling_chem_1D_lchnk
+
+
+
+    subroutine search_fld_index(fld_name, indx)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        integer,          intent(out) :: indx
+
+        
+        do indx = 1, num_registered_flds_for_chem
+            if (registered_flds_for_chem(indx)%name == fld_name) then
+                goto 200
+            endif
+        enddo 
+
+200     if (indx .gt. num_registered_flds_for_chem) then
+            call CCPL_report_error(gamil_comp_id, .false., "field  has not been registerred when output it as a for coupling chemistry model")
+        endif 
+
+    end subroutine search_fld_index
+
+
+
+    subroutine out_fld_for_coupling_chem_3D(fld_name, field_buf)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        real(r8), intent(in)         :: field_buf(:,:,:) ! Array containing field values
+        integer                      :: indx
+
+        call search_fld_index(fld_name, indx)
+        call copy_fld_for_coupling_chem_3D(field_buf, registered_flds_for_chem(indx)%fld_buf, &
+                                        registered_flds_for_chem(indx)%num_lev)
+
+    end subroutine out_fld_for_coupling_chem_3D
+
+
+
+    subroutine out_fld_for_coupling_chem_2D(fld_name, field_buf)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        real(r8), intent(in)         :: field_buf(:,:) ! Array containing field values
+        integer                      :: indx
+
+        call search_fld_index(fld_name, indx)
+        if (registered_flds_for_chem(indx)%num_lev .ne. 1) then
+            call CCPL_report_error(gamil_comp_id, .false., "number of levels of for 2D field has not been registerred correctly")
+        endif
+        call copy_fld_for_coupling_chem_2D(field_buf, registered_flds_for_chem(indx)%fld_buf, &
+                                        registered_flds_for_chem(indx)%num_lev)
+
+    end subroutine out_fld_for_coupling_chem_2D
+
+
+
+    subroutine out_fld_for_coupling_chem_1D_lchnk(fld_name, field_buf, lchnk)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        real(r8), intent(in)         :: field_buf(:) ! Array containing field values
+        integer, intent(in)          :: lchnk
+        integer                      :: indx
+
+        call search_fld_index(fld_name, indx)
+        if (registered_flds_for_chem(indx)%num_lev .ne. 1) then
+            call CCPL_report_error(gamil_comp_id, .false., "number of levels of for 2D field has not been registerred correctly")
+        endif
+        call copy_fld_for_coupling_chem_1D_lchnk(field_buf, registered_flds_for_chem(indx)%fld_buf, &
+                                        registered_flds_for_chem(indx)%num_lev, lchnk)
+
+    end subroutine out_fld_for_coupling_chem_1D_lchnk
+
+    subroutine out_fld_for_coupling_chem_2D_lchnk(fld_name, field_buf, lchnk)
+        implicit none
+        character(len=*), intent(in) :: fld_name      
+        real(r8), intent(in)         :: field_buf(:,:) ! Array containing field values
+        integer, intent(in)          :: lchnk
+        integer                      :: indx
+
+        call search_fld_index(fld_name, indx)
+        if (registered_flds_for_chem(indx)%num_lev .eq. 1) then
+            call CCPL_report_error(gamil_comp_id, .false., "number of levels of for 3D field has not been registerred correctly")
+        endif
+        call copy_fld_for_coupling_chem_2D_lchnk(field_buf, registered_flds_for_chem(indx)%fld_buf, &
+                                        registered_flds_for_chem(indx)%num_lev, lchnk)
+
+    end subroutine out_fld_for_coupling_chem_2D_lchnk
+
+
+
+    subroutine add_most_flds_for_coupling_chem
+    implicit none
+        !!allocate(PRECCON_array(pcols,begchunk:endchunk))
+        !!allocate(PRECTOT_array(pcols,begchunk:endchunk))
+        !!allocate(PRECSNO_array(pcols,begchunk:endchunk))
+        !!allocate(RADLWG_array(pcols,begchunk:endchunk))
+        !!allocate(RADSWG_array(pcols,begchunk:endchunk))
+        !!allocate(FRLAKE_array(pcols,begchunk:endchunk))
+        !!allocate(FRLANDIC_array(pcols,begchunk:endchunk))
+
+        allocate(flds_id(35))
+!!---------------------new version----------------------------------------------------------------------
+
+        call add_fld_for_coupling_chem('CLDF','fraction','Cloud fraction',pver, flds_id(1))!ok
+        call add_fld_for_coupling_chem('CMFMC','kg m-2 s-1','Moist convection mass flux',pverp, flds_id(2))!ok
+        call add_fld_for_coupling_chem('DQIDTMST','kg kg-1 s-1','ice tendency, mst proc',pver, flds_id(3))!ok
+        call add_fld_for_coupling_chem('DQLDTMST','kg kg-1 s-1','H2O tendency, mst proc',pver, flds_id(4))!ok
+        call add_fld_for_coupling_chem('DQVDTMST','kg kg-1 s-1','vapor tendency, mst proc',pver, flds_id(5))!ok
+        call add_fld_for_coupling_chem('DTRAIN','kg m-2 s-1','detrainment flux',pver, flds_id(6))!ok
+        call add_fld_for_coupling_chem('RH','fraction','relative humidity',pver, flds_id(7))!ok
+        call add_fld_for_coupling_chem('QI','kg kg-1','cloud ice mixing ratio',pver, flds_id(8))!ok
+        call add_fld_for_coupling_chem('QL','kg kg-1','cloud water mixing ratio',pver, flds_id(9))!ok
+        call add_fld_for_coupling_chem('SPHU','g kg-1','specific humidity',pver, flds_id(10))!ok
+        call add_fld_for_coupling_chem('U','m -s','E/W component of wind',pver, flds_id(11))!ok
+        call add_fld_for_coupling_chem('V','m -s','N/S component of wind',pver, flds_id(12))!ok
+        call add_fld_for_coupling_chem('TAUCLI','dimensionless','opt depth of ice clouds',pver, flds_id(13))!ok
+        call add_fld_for_coupling_chem('TAUCLW','dimensionless','opt depth of H2O cloud',pver, flds_id(14))!ok
+        call add_fld_for_coupling_chem('OPTDEP','1','visible optical depth',pver, flds_id(15))!ok
+        call add_fld_for_coupling_chem('T','K','temperature',pver, flds_id(16))!ok
+        call add_fld_for_coupling_chem('CLDFRC','fraction','column cloud fraction',1, flds_id(17))!ok
+        !call add_fld_for_coupling_chem('CLDTOPS','fraction','column cloud fraction',1, flds_id(23))
+        call add_fld_for_coupling_chem('EFLUX','W m-2','latent heat flux',1, flds_id(18))!ok
+        call add_fld_for_coupling_chem('EVAP','kg m-2 s-1','surface evaporation',1, flds_id(19))!ok
+        call add_fld_for_coupling_chem('FRLAND','fraction','fraction of land', 1, flds_id(20))!ok
+        call add_fld_for_coupling_chem('FROCEAN','fraction','fraction of ocean',1, flds_id(21))!ok
+        call add_fld_for_coupling_chem('HFLUX','W m-2','sensible heat flux',1, flds_id(22))!ok
+        call add_fld_for_coupling_chem('PARDR','W m-2','direct photsyn active rad',1, flds_id(23))!ok
+        call add_fld_for_coupling_chem('PARDF','W m-2','diffuse photsyn active rad',1, flds_id(24))!ok
+        call add_fld_for_coupling_chem('PBLH','m','PBL height',1, flds_id(25))!ok
+        call add_fld_for_coupling_chem('PRECCON','kg m-2 s-1','conv precip @ ground',1, flds_id(26))!ok
+        call add_fld_for_coupling_chem('PRECTOT','kg m-2 s-1','total precip @ ground',1, flds_id(27))!ok
+        call add_fld_for_coupling_chem('PRECSNO','kg m-2 s-1','snow precip',1, flds_id(28))!ok
+        call add_fld_for_coupling_chem('PS','Pa','sfc press at timestep',1, flds_id(29))!ok
+        call add_fld_for_coupling_chem('RADLWG','W m-2','net LW radiation @ ground',1, flds_id(30))!ok
+        call add_fld_for_coupling_chem('RADSWG','W m-2','solar radiation @ ground',1, flds_id(31))!ok
+        call add_fld_for_coupling_chem('SLP','Pa','sea level pressure',1, flds_id(32))!ok
+        call add_fld_for_coupling_chem('TS','K','surface temperature',1, flds_id(33))!ok
+        call add_fld_for_coupling_chem('TSKIN','K','surface skin temperature',1, flds_id(34))!ok
+        call add_fld_for_coupling_chem('USTAR','m s-1','friction velocity',1, flds_id(35))!ok
+!        call add_fld_for_coupling_chem('Z0','m','surface roughness height',1, flds_id(36))
+!        call add_fld_for_coupling_chem('DQRCU','kg m-2 s-1','conv precip prod rate',pver, flds_id(37))
+!        call add_fld_for_coupling_chem('DQRLSAN','kg m-2 s-1','LS precip prod rate',pver, flds_id(38))
+!        call add_fld_for_coupling_chem('PV','m2 kg-1 s-1','potential vort',pver, flds_id(39))
+!        call add_fld_for_coupling_chem('ALBD','fraction','visible surface albedo',1, flds_id(40))
+!        call add_fld_for_coupling_chem('MOISTQ','g kg-1 day-1','tendency in sp. C17',pver, flds_id(41))
+!        call add_fld_for_coupling_chem("FRLAKE",   "fraction", "fraction of lake", 1, flds_id(42))
+!        call add_fld_for_coupling_chem("FRLANDIC", "fraction", "fraction of land ice", 1, flds_id(43))
+!        call add_fld_for_coupling_chem('SNODP','m','snow depth',1, flds_id(44))
+!        call add_fld_for_coupling_chem('SNOMAS','m','snow mass(total snow storage on the land)',1, flds_id(45))
+!        call add_fld_for_coupling_chem('TROPP','Pa','tropopause pressure',1, flds_id(46))
+!        call add_fld_for_coupling_chem('U10M','m s-1','E/W wind speed @ 10m height',1, flds_id(47))
+!        call add_fld_for_coupling_chem('V10M','m s-1','N/S wind speed @ 10m height',1, flds_id(48))
+!        call add_fld_for_coupling_chem('GRN','fraction','greenness fraction',1, flds_id(49))
+!        call add_fld_for_coupling_chem('GWETROOT','fraction','root zone soil wetness',1, flds_id(50))
+!        call add_fld_for_coupling_chem('GWETTOP','fraction','top soil moisture',1, flds_id(51))
+!        call add_fld_for_coupling_chem('LAI','m2 m-2','leaf area index',1, flds_id(52))
+
+    end subroutine add_most_flds_for_coupling_chem
+
+
+
+    subroutine out_caculated_flds_for_coupling_chem()
+        use comsrf, only: surface_state2d, srfflx_state2d, landfrac
+        implicit none
+        integer :: lchnk, ncols, i
+        
+        do lchnk = begchunk, endchunk
+            ncols = get_ncols_p(lchnk)
+            do i = 1, ncols
+                PRECCON_array(i,lchnk) = surface_state2d(lchnk)%precc(i)*1000.
+                PRECTOT_array(i,lchnk) = (surface_state2d(lchnk)%precl(i)+surface_state2d(lchnk)%precc(i))*1000.
+                PRECSNO_array(i,lchnk) = (surface_state2d(lchnk)%precsc(i)+surface_state2d(lchnk)%precsl(i))*1000.
+                RADLWG_array(i,lchnk)  = srfflx_state2d(lchnk)%lwup(i)-surface_state2d(lchnk)%flwds(i) 
+                RADSWG_array(i,lchnk)  = surface_state2d(lchnk)%srfrad(i)-surface_state2d(lchnk)%flwds(i)
+                !send2d_chunk(i,lchnk,atm_output_field_pbot)  = surface_state2d(lchnk)%pbot(i) ! Atmospheric state variable Pa
+            end do
+        end do
+        call out_fld_for_coupling_chem('PRECCON',PRECCON_array)
+        call out_fld_for_coupling_chem('PRECTOT',PRECTOT_array)
+        call out_fld_for_coupling_chem('PRECSNO',PRECSNO_array)
+        call out_fld_for_coupling_chem('RADLWG',RADLWG_array)
+        call out_fld_for_coupling_chem('RADSWG',RADSWG_array)
+        call out_fld_for_coupling_chem('FRLAND',landfrac)
+
+    end subroutine out_caculated_flds_for_coupling_chem
+
+    subroutine register_component_coupling_configuration(comm, comp_name, &
+               export_interface_id, time_step)
+       use pmgrid
+       use ppgrid
+       use phys_grid
+       use rgrid,          only: nlon                                                  ! reduced grid
+       use commap
+       use dycore, only: dycore_is
+       use CCPL_interface_mod
+       implicit none
+
+#include <comhyb.h>
+#include <pdyn.h>
+
+       character(len=*), intent(in)       :: comp_name
+       integer, intent(inout)             :: comm
+       integer, intent(out)               :: export_interface_id
+       integer, intent(in)                :: time_step
+       character*1024                     :: annotation
+       integer                            :: timer1_id
+       integer                            :: num_proc, proc_id
+       logical                            :: interface_status
+
+       proc_id = CCPL_get_current_process_id_in_component(gamil_comp_id)
+
+       call CCPL_set_normal_time_step(gamil_comp_id, time_step, annotation="setting the time step for gamil")
+
+       annotation = "component "//comp_name//" start registration"
+
+       call register_grids_decomps
+       call add_most_flds_for_coupling_chem
+       call CCPL_set_3D_grid_variable_surface_field(grid_3d_id, flds_id(29), "set bottom field of a 3-D grid")
+
+       timer1_id = CCPL_define_single_timer(gamil_comp_id, "seconds", 3600, 0, 0, annotation="define a single timer for comp_id_gamil")
+
+       export_interface_id = CCPL_register_export_interface("send_data_to_GIGC", 35, flds_id, timer1_id, annotation="register interface for sending data to GIGC")
+!       call add_fld_for_coupling_chem('SO2','m s-1','SO2 concerntration',1, flds_id(1))
+!       import_interface_id = CCPL_register_import_interface("receive_data_from_GIGC", 1, flds_id, timer1_id, 0, annotation="register interface for receiving data from GIGC")
+       call CCPL_end_coupling_configuration(gamil_comp_id, annotation = "component "//comp_name//" end registration")
+
+    end subroutine register_component_coupling_configuration
+
+end module coupling_chemistry_model_mod
diff --git a/src/couple/c_coupler/register_decompositions_mod.F90 b/src/couple/c_coupler/register_decompositions_mod.F90
deleted file mode 100644
index e0625e7..0000000
--- a/src/couple/c_coupler/register_decompositions_mod.F90
+++ /dev/null
@@ -1,84 +0,0 @@
-!***************************************************************
-!  This is a source file of GAMIL, which registers all parallel 
-!  decompositions into C-Coupler library. This file was initially 
-!  finished by Dr. Li Liu. If you have any problem, please 
-!  contact Dr. Li Liu via liuli-cess@tsinghua.edu.cn
-!***************************************************************
-
-
-module register_decompositions_mod
-
-    public register_decompositions
-
-contains
-
-    subroutine register_decompositions
-       use pmgrid
-       use phys_grid
-       use rgrid,          only: nlon                                                  ! reduced grid
-       use c_coupler_interface_mod
-       implicit none
-       integer,allocatable :: decomp_cell_indexes(:)
-       integer,allocatable :: dyn_cell_global_index(:)
-       integer             :: n, i, j, startpoint, bufsize
-       integer :: lchnk         ! indices
-       integer :: ncol                  ! number of columns in current chunk
-       integer :: lats(pcols)           ! array of latitude indices
-       integer :: lons(pcols)           ! array of longitude indices
-       integer :: begj, endj, NX
-
-       NX=130
-
-       bufsize=0
-       do j=1,plat
-          bufsize = bufsize + nlon(j)
-       end do
-       allocate(decomp_cell_indexes(bufsize))
-       n = 0
-       startpoint = 0
-       do j=1,plat
-          do i=1,nlon(j)
-             if(get_chunk_owner_p(i,j) .eq. iam) then
-                n=n+1
-                decomp_cell_indexes(n) = startpoint + i
-             end if
-          enddo
-          startpoint = startpoint + nlon(j)
-       enddo
-       call c_coupler_register_decomposition("gamil_gamil_grid_decomp", "gamil_grid", n, decomp_cell_indexes)
-       deallocate(decomp_cell_indexes)
-
-       allocate(decomp_cell_indexes(pcols*(endchunk-begchunk+1)))
-       decomp_cell_indexes=0
-       do lchnk = begchunk,endchunk
-          ncol = get_ncols_p(lchnk)
-          call get_lon_all_p(lchnk, ncol, lons)
-          call get_lat_all_p(lchnk, ncol, lats)
-          do i=1,ncol
-              decomp_cell_indexes((lchnk-begchunk)*pcols+i)=(lats(i)-1)*(128)+lons(i)
-          end do
-       end do
-       call c_coupler_register_decomposition("gamil_2D_decomp_phys", "gamil_grid", &
-                                  pcols*(endchunk-begchunk+1), decomp_cell_indexes)
-       deallocate(decomp_cell_indexes)
-
-       bufsize=(endlatexdyn-beglatexdyn+1)*NX
-       allocate(dyn_cell_global_index(bufsize))
-       dyn_cell_global_index=-1
-       begj = beglatexdyn + numbnd
-       endj = endlatexdyn - numbnd
-       do j=begj,endj
-          do i=2,NX-1
-             dyn_cell_global_index((j-begj)*NX+i) = (j-1)*(NX-2)+i-1
-          enddo
-       enddo
-
-       call c_coupler_register_decomposition("gamil_2D_decomp_dyn", "gamil_grid", &
-                                  bufsize, dyn_cell_global_index)
-
-       deallocate(dyn_cell_global_index)
-
-    end subroutine register_decompositions
-
-end module register_decompositions_mod
-
diff --git a/src/couple/c_coupler/register_private_variables_mod.F90 b/src/couple/c_coupler/register_private_variables_mod.F90
deleted file mode 100755
index e4b6b28..0000000
--- a/src/couple/c_coupler/register_private_variables_mod.F90
+++ /dev/null
@@ -1,65 +0,0 @@
-!***************************************************************
-!  This is a source file of GAMIL, which registers all variables
-!  into C-Coupler library for I/O. This file was initially 
-!  finished by Dr. Li Liu. If you have any problem, please 
-!  contact Dr. Li Liu via liuli-cess@tsinghua.edu.cn
-!***************************************************************
-
-
-#include <misc.h>
-#include <params.h>
-
-
-module register_private_variables_mod
-
-    use shr_kind_mod, only: r8 => shr_kind_r8
-    use ppgrid
-    use phys_grid,    only: read_chunk_from_field, write_field_from_chunk, get_ncols_p
-    use pmgrid,       only: masterproc
-    use prognostics,  only: ptimelevels, n3, n3m2
-    use buffer
-    use radae,        only: abstot_3d, absnxt_3d, emstot_3d, initialize_radbuffer
-    use comsrf
-    use ioFileMod
-    use phys_buffer
-    use c_coupler_interface_mod
-
-    implicit none
-#include <pdyn.h> 
-#include <comfm2.h> 
-
-    !
-    ! Public interfaces
-    !
-    public  register_static_variables
-    private register_dyn_variables
-
-CONTAINS
-
-    
-
-    subroutine register_dyn_variables
-       use prognostics
-       use comfm1
-       use pmgrid, only: beglatex,beglatexdyn,endlatexdyn
-       implicit none
-
-       call c_coupler_register_model_data(pes,"gamil_2D_decomp_dyn","gamil_pes",.true.)
-       call c_coupler_register_model_data(t,"gamil_2D_decomp_dyn","gamil_t",.true.)
-       !call c_coupler_add_field_for_perturbing_roundoff_errors(pes)
-       call c_coupler_add_field_for_perturbing_roundoff_errors(t)
-
-    end subroutine register_dyn_variables
-
-
-
-    subroutine register_static_variables
-
-       implicit none
-
-       call register_dyn_variables
-
-    end subroutine register_static_variables
-
-
-end module register_private_variables_mod
diff --git a/src/dynamics/eul/dynpkg.F90 b/src/dynamics/eul/dynpkg.F90
index 7737a05..d499208 100755
--- a/src/dynamics/eul/dynpkg.F90
+++ b/src/dynamics/eul/dynpkg.F90
@@ -96,7 +96,6 @@
                      ,dx,sinu,sinv,oux,ouy,ovx,ovy,ff,cur                      &
                      ,mm1,mp1,mm2,mp2,mm3,mp3,mdj )
 
-
       call t_stopf('dyfram')
 !
 !----------------------------------------------------------
diff --git a/src/dynamics/eul/stepon.F90 b/src/dynamics/eul/stepon.F90
index 156cab5..351c00b 100755
--- a/src/dynamics/eul/stepon.F90
+++ b/src/dynamics/eul/stepon.F90
@@ -41,8 +41,9 @@ subroutine stepon
     use time_manager,   only: advance_timestep, get_step_size, get_nstep, &
                               is_first_step, is_first_restart_step, &
                               is_last_step, is_end_curr_day, get_curr_calday, &
-                              dtdy ! added by WANG Hui
-    use c_coupler_interface_mod
+                              dtdy, get_curr_date ! added by WANG Hui
+    use CCPL_interface_mod
+    use coupling_chemistry_model_mod
 
     implicit none
 
@@ -77,6 +78,9 @@ subroutine stepon
     ! Externals
     !
     logical, external :: rstwr  ! whether or not to write restart files
+    logical           :: interface_status
+    integer           :: ccpl_year,ccpl_month,ccpl_day,ccpl_second
+    integer           :: gamil_yr, gamil_mon, gamil_day, gamil_tod
     !
     !-----------------------------------------------------------------------
     call t_startf('stepon_startup'); if(masterproc) write(6,*) '+++++ stepon_startup +++++'
@@ -205,6 +209,8 @@ subroutine stepon
         call p_d_coupling(phys_state, phys_tend, t2, fu, fv, &
             qminus(i1,1,1,begj), q3(i1,1,1,begj,n3), q31(i1,1,begj), t31(i1,1,begj))
         call t_stopf('p_d_coupling')
+        
+        interface_status = CCPL_execute_interface_using_name(gamil_comp_id, "send_data_to_GIGC", .false., annotation="execute interface for sending data to GIGC")
 
         !----------------------------------------------------------
         ! DYNPKG Call the Dynamics Package
@@ -221,8 +227,6 @@ subroutine stepon
 
         ! prepare data for physics
 
-        call c_coupler_perturb_roundoff_errors
-
         call c_a_switching(pmtop)            !!(wh 2003.10.28)
 
         call t_stopf('dynpkg')
@@ -257,9 +261,11 @@ subroutine stepon
         !
         ! Write restart file
         !
+            call CCPL_do_restart_write_IO(gamil_comp_id, .false.)
         if (rstwr() .and. nrefrq /= 0) then
             call t_startf ('write_restart')
             call write_restart
+            !call CCPL_do_restart_write_IO(gamil_comp_id, .false.)
             call t_stopf ('write_restart')
         end if
         !
@@ -277,8 +283,9 @@ subroutine stepon
         !
         ! Advance timestep before returning to top of loop
         !
-        call c_coupler_advance_timer()
+        !call c_coupler_advance_timer()
         call advance_timestep()
+        call CCPL_advance_time(gamil_comp_id)
         call t_stopf('stepon_st')
         !
         ! Check for end of run
diff --git a/src/lnd/clm2/src/main/controlMod.F90 b/src/lnd/clm2/src/main/controlMod.F90
index f1e2562..cf06ff9 100755
--- a/src/lnd/clm2/src/main/controlMod.F90
+++ b/src/lnd/clm2/src/main/controlMod.F90
@@ -538,7 +538,7 @@ CONTAINS
 
     if (rpntpath == 'not_specified') then
        call getenv ('HOME', homedir)
-       rpntpath = 'lnd.'//trim(caseid)//'.rpointer'
+       rpntpath = trim(homedir)//'/lnd.'//trim(caseid)//'.rpointer'
     endif
 
     do i = 1, nhist
diff --git a/src/physics/cam1/MG.F90 b/src/physics/cam1/MG.F90
index eb8b60e..9df57c6 100755
--- a/src/physics/cam1/MG.F90
+++ b/src/physics/cam1/MG.F90
@@ -19,6 +19,8 @@ module MG
 
     ! debug modules
     use pmgrid,        only: masterproc
+    use CCPL_interface_mod
+    use coupling_chemistry_model_mod, only: out_fld_for_coupling_chem
 
     implicit none
 
@@ -197,10 +199,10 @@ contains
         ! sxj add aer_act
         call addfld ('aer_act ','cm-3     ',pver, 'A','aerosol activate number                  '    ,phys_decomp)
         call add_default ('aer_act ', 1, ' ')
-        call addfld ('CMEICE  ','kg/kg/s ',pver, 'A','Rate of cond-evap of ice within the cloud'    ,phys_decomp)
-        call addfld ('CMELIQ  ','kg/kg/s ',pver, 'A','Rate of cond-evap of liq within the cloud'    ,phys_decomp)
-        call addfld ('ICE2PR  ','kg/kg/s ',pver, 'A','Rate of conversion of ice to precip'          ,phys_decomp)
-        call addfld ('LIQ2PR  ','kg/kg/s ',pver, 'A','Rate of conversion of liq to precip'          ,phys_decomp)
+        !!call addfld ('CMEICE  ','kg/kg/s ',pver, 'A','Rate of cond-evap of ice within the cloud'    ,phys_decomp)
+        !!call addfld ('CMELIQ  ','kg/kg/s ',pver, 'A','Rate of cond-evap of liq within the cloud'    ,phys_decomp)
+        !!call addfld ('ICE2PR  ','kg/kg/s ',pver, 'A','Rate of conversion of ice to precip'          ,phys_decomp)
+        !!call addfld ('LIQ2PR  ','kg/kg/s ',pver, 'A','Rate of conversion of liq to precip'          ,phys_decomp)
         call addfld ('ZMDLF   ','kg/kg/s ',pver, 'A','Detrained liquid water from ZM convection'    ,phys_decomp)
         call addfld ('PRODPREC','kg/kg/s ',pver, 'A','Rate of conversion of condensate to precip'   ,phys_decomp)
         call addfld ('EVAPPREC','kg/kg/s ',pver, 'A','Rate of evaporation of falling precip'        ,phys_decomp)
@@ -852,6 +854,9 @@ contains
         call outfld('CLDST   ', cldst,  pcols, lchnk)
         call outfld('CNVCLD  ', clc,    pcols, lchnk)
 
+!        call out_fld_for_coupling_chem('QI',         icimr,         lchnk)
+!        call out_fld_for_coupling_chem('QL',         icwmr,         lchnk)
+
     endsubroutine stratiform_tend
 
 end module MG
diff --git a/src/physics/cam1/diagnostics.F90 b/src/physics/cam1/diagnostics.F90
index d23d052..803bef6 100755
--- a/src/physics/cam1/diagnostics.F90
+++ b/src/physics/cam1/diagnostics.F90
@@ -27,6 +27,7 @@ contains
         use physics_types, only: physics_state
         use physconst,     only: gravit, rga, rair
         use wv_saturation, only: aqsat
+        use coupling_chemistry_model_mod, only: out_fld_for_coupling_chem  
 #ifdef COUP_CSM
         use ccsm_msg,      only: psl   ! Store sea-level pressure for CCSM
 #endif
@@ -142,6 +143,7 @@ contains
         call aqsat(state%t, state%pmid, tem2, ftem, pcols, ncol, pver, 1, pver)
         state%rh(:ncol,:) = state%q(:ncol,:,1)/ftem(:ncol,:)*100.
         call outfld('RELHUM  ', state%rh, pcols, lchnk)
+        call out_fld_for_coupling_chem('RH', ftem, lchnk)
         !
         ! Sea level pressure
         !
@@ -179,6 +181,11 @@ contains
         call outfld('TBOT    ', state%t(1,pver),   pcols, lchnk)
         call outfld('ZBOT    ', state%zm(1,pver),  pcols, lchnk)
 
+        call out_fld_for_coupling_chem('SPHU', state%q(:,:,1), lchnk)
+        call out_fld_for_coupling_chem('T',    state%t,        lchnk)
+        call out_fld_for_coupling_chem('U',    state%u,        lchnk)
+        call out_fld_for_coupling_chem('V',    state%v,        lchnk)
+
         return
     end subroutine diag_dynvar
 
diff --git a/src/physics/cam1/physpkg.F90 b/src/physics/cam1/physpkg.F90
index 31ec674..b4f13c8 100755
--- a/src/physics/cam1/physpkg.F90
+++ b/src/physics/cam1/physpkg.F90
@@ -38,9 +38,12 @@ subroutine physpkg(phys_state, phys_state0, gw,     ztodt,  &
     use time_manager,   only: get_nstep, is_first_step, is_first_restart_step, &
                               is_end_curr_month, get_curr_date
     use phys_buffer,    only: pbuf   ! added by SHI Xiangjun
+    use CCPL_interface_mod
+    use coupling_chemistry_model_mod, only:out_fld_for_coupling_chem, out_caculated_flds_for_coupling_chem
 #ifndef COUP_CSM
     use sst_data,       only: sst    ! added by SHI Xiangjun
 #endif
+    use physconst,     only: gravit, rga, rair
 
     implicit none
 
@@ -62,6 +65,9 @@ subroutine physpkg(phys_state, phys_state0, gw,     ztodt,  &
     real(r8), intent(inout) :: qcwatn(pcols, pver, begchunk:endchunk) ! new moisture
     real(r8), intent(inout) :: lcwato(pcols, pver, begchunk:endchunk) ! cloud liquid water
     real(r8), intent(inout) :: lcwatn(pcols, pver, begchunk:endchunk) ! cloud liquid water
+    real(r8), allocatable :: psl(:,:)      ! sea-level pressure
+    real(r8) psl_tmp(pcols)   ! Sea Level Pressure
+    type(physics_state) :: state
 
     integer i, m, lat, c, lchnk                ! indices
     integer lats(pcols)                        ! array of latitude indices
@@ -365,5 +371,31 @@ subroutine physpkg(phys_state, phys_state0, gw,     ztodt,  &
 
     call t_stopf ('global_ts')
 
+!    call out_fld_for_coupling_chem('CLDF',cldn)
+!    call out_fld_for_coupling_chem('FROCEAN',ocnfrac)
+
+    allocate(psl(pcols,begchunk:endchunk))
+    psl     (:,:) = inf
+    do c = begchunk, endchunk
+       state = phys_state(c)
+       lchnk = state%lchnk
+       ncol  = state%ncol
+       call cpslec(ncol, state%pmid, state%phis, state%ps, state%t,psl_tmp, gravit, rair)
+    psl(:ncol,lchnk) = psl_tmp(:ncol)
+    enddo
+    call out_fld_for_coupling_chem('SLP',psl)
+
+    do c = begchunk, endchunk
+!        call out_fld_for_coupling_chem('EFLUX',srfflx_state2d(c)%lhf(:),c)
+!        call out_fld_for_coupling_chem('HFLUX',srfflx_state2d(c)%shf(:),c)
+!        call out_fld_for_coupling_chem('EVAP',srfflx_state2d(c)%cflx(:,1),c)
+        call out_fld_for_coupling_chem('TS',srfflx_state2d(c)%tref(:),c)
+!        call out_fld_for_coupling_chem('TSKIN',srfflx_state2d(c)%ts(:),c)
+        call out_fld_for_coupling_chem('PS',(phys_state(c)%ps)/100.0,c)
+!        call out_fld_for_coupling_chem('PARDR',surface_state2d(c)%sols,c)
+!        call out_fld_for_coupling_chem('PARDF',surface_state2d(c)%solsd,c)
+    end do
+!    call out_caculated_flds_for_coupling_chem
+
     return
 end subroutine physpkg
diff --git a/src/physics/cam1/radcswmx.F90 b/src/physics/cam1/radcswmx.F90
index 61ed3fc..ceb563c 100755
--- a/src/physics/cam1/radcswmx.F90
+++ b/src/physics/cam1/radcswmx.F90
@@ -56,6 +56,7 @@ subroutine radcswmx(lchnk   ,ncol    ,                            &
 !-----------------------------------------------------------------------
     use shr_kind_mod, only: r8 => shr_kind_r8
     use ppgrid
+    use coupling_chemistry_model_mod, only: out_fld_for_coupling_chem
 
    implicit none
 
@@ -491,6 +492,8 @@ subroutine radcswmx(lchnk   ,ncol    ,                            &
 !
    real(r8) tauxcl(pcols,0:pver) ! water cloud extinction optical depth
    real(r8) tauxci(pcols,0:pver) ! ice cloud extinction optical depth
+   real*8 tauxcl_output(pcols,pver)
+   real*8 tauxci_output(pcols,pver)
    real(r8) wcl(pcols,0:pver) ! liquid cloud single scattering albedo
    real(r8) gcl(pcols,0:pver) ! liquid cloud asymmetry parameter
    real(r8) fcl(pcols,0:pver) ! liquid cloud forward scattered fraction
@@ -948,7 +951,8 @@ subroutine radcswmx(lchnk   ,ncol    ,                            &
               tauxci   ,wci      ,gci      ,fci      , &
               tauxar   ,wa       ,ga       ,fa       , &
               rdir     ,rdif     ,tdir     ,tdif     ,explay  , &
-              rdirc    ,rdifc    ,tdirc    ,tdifc    ,explayc )
+              rdirc    ,rdifc    ,tdirc    ,tdifc    ,explayc , &
+              lchnk) !copied from Yiran
 !
 ! End spectral loop
 !
@@ -1669,5 +1673,11 @@ subroutine radcswmx(lchnk   ,ncol    ,                            &
 !
     end do
 
+    tauxci_output(:,1:pver) = tauxci(:,1:pver)
+    tauxcl_output(:,1:pver) = tauxcl(:,1:pver)
+
+!    call out_fld_for_coupling_chem('TAUCLI', tauxci_output, lchnk)
+!    call out_fld_for_coupling_chem('TAUCLW', tauxcl_output, lchnk)
+
     return
 end subroutine radcswmx
diff --git a/src/physics/cam1/raddedmx.F90 b/src/physics/cam1/raddedmx.F90
index 201797c..725701c 100755
--- a/src/physics/cam1/raddedmx.F90
+++ b/src/physics/cam1/raddedmx.F90
@@ -5,7 +5,7 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
                     wci     ,gci     ,fci     ,tauxar  ,wa      , &
                     ga      ,fa      ,rdir    ,rdif    ,tdir    , &
                     tdif    ,explay  ,rdirc   ,rdifc   ,tdirc   , &
-                    tdifc   ,explayc )
+                    tdifc   ,explayc ,lchnk) !copied from Yiran
 !----------------------------------------------------------------------- 
 ! 
 ! Purpose: 
@@ -25,6 +25,7 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
 !-----------------------------------------------------------------------
    use shr_kind_mod, only: r8 => shr_kind_r8
    use ppgrid
+   use coupling_chemistry_model_mod, only:out_fld_for_coupling_chem
 
    implicit none
 
@@ -48,6 +49,9 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
 !
 ! Input arguments
 !
+   !copied from Yiran
+   integer, intent(in) :: lchnk
+   !copied end
    real(r8), intent(in) :: coszrs(pcols)        ! Cosine zenith angle
    real(r8), intent(in) :: trayoslp             ! Tray/sslp
    real(r8), intent(in) :: pflx(pcols,0:pverp)  ! Interface pressure
@@ -105,6 +109,9 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
    real(r8) tauray(pcols)        ! Layer rayleigh optical depth
    real(r8) taucsc               ! Layer cloud scattering optical depth
    real(r8) tautot               ! Total layer optical depth
+   !yxz added
+   real(r8) optdep(pcols,pver)   ! Total layer single scatter albedo
+
    real(r8) wtot                 ! Total layer single scatter albedo
    real(r8) gtot                 ! Total layer asymmetry parameter
    real(r8) ftot                 ! Total layer forward scatter fraction
@@ -166,12 +173,19 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
 !    and cloudy conditions) and transmission of direct radiation
 !    (under clear and cloudy conditions) for each layer.
 !
+
+    !copied from Yiran
+    optdep = 0.0
+    !copied end
    do k=0,pver
       do nn=1,ndayc
          i=idayc(nn)
             tauray(i) = trayoslp*(pflx(i,k+1)-pflx(i,k))
             taugab(i) = abh2o*uh2o(i,k) + abo3*uo3(i,k) + abco2*uco2(i,k) + abo2*uo2(i,k)
             tautot = tauxcl(i,k) + tauxci(i,k) + tauray(i) + taugab(i) + tauxar(i,k)
+            !copied from Yiran
+            optdep(i,k) = tautot
+            !copied end
             taucsc = tauxcl(i,k)*wcl(i,k) + tauxci(i,k)*wci(i,k) + tauxar(i,k)*wa(i,k)
             wtau   = wray*tauray(i)
             wt     = wtau + taucsc
@@ -224,6 +238,9 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
                explayc(ns,i,k) = explay(ns,i,k)
             else
                tautot = tauray(i) + taugab(i) + tauxar(i,k)
+               !copied from Yiran
+               optdep(i,k) = tautot
+               !copied end
                taucsc = tauxar(i,k)*wa(i,k)
 !
 ! wtau already computed for all-sky
@@ -269,6 +286,16 @@ subroutine raddedmx(coszrs  ,ndayc   ,idayc   ,abh2o   , &
             end if
          end do
    end do
-
+   !copied from Yiran
+   do k=0,pver
+      do nn=1,ndayc
+         i=idayc(nn)
+        if (optdep(i,k) < 0) then
+           optdep(i,k) = 0.0
+        endif
+      enddo
+    enddo
+   call out_fld_for_coupling_chem('OPTDEP', optdep, lchnk) !!problem variable,added by yxz
+   !copied end
    return
 end subroutine raddedmx
diff --git a/src/physics/cam1/tphysbc.F90 b/src/physics/cam1/tphysbc.F90
index 66a4c18..5329009 100755
--- a/src/physics/cam1/tphysbc.F90
+++ b/src/physics/cam1/tphysbc.F90
@@ -62,6 +62,8 @@ subroutine tphysbc(ztodt,   pblht,   tpert,   ts,      &
                            pbuf_get_fld_idx              !!
 
    USE pmgrid,                  ONLY: masterproc,iam     !sxj-2008-11-08
+   use CCPL_interface_mod
+   use coupling_chemistry_model_mod, only: out_fld_for_coupling_chem
 #ifdef SPMD                                              !sxj
    USE mpishorthand,      only:mpicom
 #endif                                                   !sxj 2008-11-09
@@ -1262,6 +1264,8 @@ subroutine tphysbc(ztodt,   pblht,   tpert,   ts,      &
             call outfld('ICIMR ',icimr,  pcols,lchnk)
             call outfld('ICWMR ',icwmr,  pcols,lchnk)
             call outfld('FICE  ',fice,   pcols,lchnk)
+!            call out_fld_for_coupling_chem('QI',         icimr,         lchnk)
+!            call out_fld_for_coupling_chem('QL',         icwmr,         lchnk)
         end if
         !
         ! Special diagnostic cloud water fields:
@@ -1429,6 +1433,13 @@ subroutine tphysbc(ztodt,   pblht,   tpert,   ts,      &
       call mf2mr (lchnk, ncol, state%q)
    end if
 
+   call out_fld_for_coupling_chem('CMFMC',      cmfmc,         lchnk)
+   call out_fld_for_coupling_chem('DQIDTMST',   dqcond(:,:,3), lchnk)
+   call out_fld_for_coupling_chem('DQLDTMST',   dqcond(:,:,2), lchnk)
+   call out_fld_for_coupling_chem('DQVDTMST',   dqcond(:,:,1), lchnk)
+   call out_fld_for_coupling_chem('DTRAIN',     zdu,           lchnk)
+   call out_fld_for_coupling_chem('CLDFRC',     cltot,           lchnk)
+
    return
  end subroutine tphysbc
 
diff --git a/src/physics/cam1/turbulence.F90 b/src/physics/cam1/turbulence.F90
index 35ab5ef..501acd8 100755
--- a/src/physics/cam1/turbulence.F90
+++ b/src/physics/cam1/turbulence.F90
@@ -30,6 +30,7 @@ module turbulence
   use pmgrid, only    : masterproc
   use tracers, only   : pcnst, pnats
   use history, only: outfld
+  use coupling_chemistry_model_mod, only: out_fld_for_coupling_chem
 
   implicit none
 !
@@ -231,6 +232,9 @@ CONTAINS
     call outfld ('KVM     ',kvm,pcols,lchnk)
     call outfld ('CGS     ',cgs,pcols,lchnk)
 
+!    call out_fld_for_coupling_chem('USTAR', ustar, lchnk)
+!    call out_fld_for_coupling_chem('PBLH', pblh, lchnk)
+
     return
  end subroutine trbintr
 !
diff --git a/src/physics/cam1/wv_saturation.F90 b/src/physics/cam1/wv_saturation.F90
index 116417c..32d90a3 100755
--- a/src/physics/cam1/wv_saturation.F90
+++ b/src/physics/cam1/wv_saturation.F90
@@ -64,7 +64,7 @@ contains
             write(*, "('  td   = ', F)") td
             write(*, "('  tmin = ', F)") tmin
             write(*, "('  tmax = ', F)") tmax
-            call endrun
+!            call endrun
         end if
 
         estblf = (tmin+int(e(td)-tmin)-e(td)+1.0)* &
